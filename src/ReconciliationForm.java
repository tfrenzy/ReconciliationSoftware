import java.awt.Desktop;
import java.awt.Point;
import java.io.*;
import java.sql.*;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellReference;
import org.apache.poi.poifs.filesystem.NPOIFSFileSystem;
import org.apache.poi.ss.usermodel.*;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReconciliationForm.java
 *
 * Created on 09-May-2013, 12:32:46
 */

/**
 *
 * @author Tonye
 */
public class ReconciliationForm extends javax.swing.JFrame {
String database = "jdbc:odbc:Driver={Microsoft Access Driver (*.mdb)};DBQ=reconciliation.mdb";
Connection conn;
Statement s;
PreparedStatement preparedStatement;
ResultSet rs;
File upload = null;
String type = null;
String bank_namee = null;
String bank_account_name = null;
String cashbook_account = null;
DecimalFormat decimal, decimal2;
int main_month = 0;
int main_year = 0;

    /** Creates new form ReconciliationForm */
public ReconciliationForm() {
deleteReports();
initComponents();
setExtendedState(MAXIMIZED_BOTH);
jDialog1.setSize(131, 91);
jDialog3.setSize(399, 318);
jDialog2.setSize(500, 100);
jMenuItem5.setVisible(false);
jMenuItem12.setVisible(false);
jMenuItem13.setVisible(false);
//jMenuItem8.setVisible(false);
jLabel27.setVisible(false);
jInternalFrame11.setSize(580, 386);
decimal = new DecimalFormat("#0.00");
decimal2 = new DecimalFormat("#,000.00");
}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jButton6 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jDialog2 = new javax.swing.JDialog();
        jLabel26 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jButton23 = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        jDialog3 = new javax.swing.JDialog();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTable10 = new javax.swing.JTable();
        jDialog4 = new javax.swing.JDialog();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jButton31 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jComboBox13 = new javax.swing.JComboBox();
        jLabel42 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jTextField22 = new javax.swing.JTextField();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jLabel10 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jTextField3 = new javax.swing.JTextField();
        jComboBox4 = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jComboBox14 = new javax.swing.JComboBox();
        jLabel49 = new javax.swing.JLabel();
        jTextField23 = new javax.swing.JTextField();
        jInternalFrame3 = new javax.swing.JInternalFrame();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jComboBox6 = new javax.swing.JComboBox();
        jTextField9 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jInternalFrame4 = new javax.swing.JInternalFrame();
        jLabel6 = new javax.swing.JLabel();
        jFileChooser1 = new javax.swing.JFileChooser();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel39 = new javax.swing.JLabel();
        jTextField18 = new javax.swing.JTextField();
        jInternalFrame5 = new javax.swing.JInternalFrame();
        jFileChooser2 = new javax.swing.JFileChooser();
        jLabel40 = new javax.swing.JLabel();
        jTextField19 = new javax.swing.JTextField();
        jInternalFrame6 = new javax.swing.JInternalFrame();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        jTextField16 = new javax.swing.JTextField();
        jInternalFrame7 = new javax.swing.JInternalFrame();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton12 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jInternalFrame8 = new javax.swing.JInternalFrame();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton13 = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        jComboBox12 = new javax.swing.JComboBox();
        jButton27 = new javax.swing.JButton();
        jInternalFrame9 = new javax.swing.JInternalFrame();
        jLabel20 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox();
        jButton14 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jButton15 = new javax.swing.JButton();
        jLabel41 = new javax.swing.JLabel();
        jComboBox15 = new javax.swing.JComboBox();
        jInternalFrame10 = new javax.swing.JInternalFrame();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jComboBox7 = new javax.swing.JComboBox();
        jLabel22 = new javax.swing.JLabel();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jInternalFrame11 = new javax.swing.JInternalFrame();
        jLabel23 = new javax.swing.JLabel();
        jComboBox8 = new javax.swing.JComboBox();
        jButton11 = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jButton18 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jComboBox11 = new javax.swing.JComboBox();
        jInternalFrame12 = new javax.swing.JInternalFrame();
        jLabel24 = new javax.swing.JLabel();
        jComboBox9 = new javax.swing.JComboBox();
        jButton19 = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        jButton20 = new javax.swing.JButton();
        jInternalFrame13 = new javax.swing.JInternalFrame();
        jLabel25 = new javax.swing.JLabel();
        jComboBox10 = new javax.swing.JComboBox();
        jButton21 = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        jButton22 = new javax.swing.JButton();
        jInternalFrame14 = new javax.swing.JInternalFrame();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jTextField15 = new javax.swing.JTextField();
        jButton25 = new javax.swing.JButton();
        jTextField20 = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jTextField21 = new javax.swing.JTextField();
        jInternalFrame15 = new javax.swing.JInternalFrame();
        jLabel35 = new javax.swing.JLabel();
        jTextField17 = new javax.swing.JTextField();
        jButton26 = new javax.swing.JButton();
        jInternalFrame16 = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jComboBox16 = new javax.swing.JComboBox();
        jComboBox17 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel45 = new javax.swing.JLabel();
        jComboBox18 = new javax.swing.JComboBox();
        jButton28 = new javax.swing.JButton();
        jInternalFrame17 = new javax.swing.JInternalFrame();
        jLabel50 = new javax.swing.JLabel();
        jComboBox19 = new javax.swing.JComboBox();
        jButton29 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        jLabel54 = new javax.swing.JLabel();
        jComboBox20 = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();

        jDialog1.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        jDialog1.setResizable(false);

        jButton6.setText("Dismiss");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel9.setText("Successful");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jButton6))
                .addGap(54, 54, 54))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addContainerGap())
        );

        jLabel26.setText("jLabel26");

        jButton23.setText("Enter");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 281, Short.MAX_VALUE)
                        .addComponent(jLabel27))
                    .addGroup(jDialog2Layout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField10, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton23)
                    .addComponent(jLabel27))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jDialog3.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jDialog3ComponentResized(evt);
            }
        });

        jTable10.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Particulars", "Value", "Type"
            }
        ));
        jScrollPane12.setViewportView(jTable10);
        jTable10.getColumnModel().getColumn(1).setPreferredWidth(200);
        jTable10.getColumnModel().getColumn(2).setPreferredWidth(110);

        javax.swing.GroupLayout jDialog3Layout = new javax.swing.GroupLayout(jDialog3.getContentPane());
        jDialog3.getContentPane().setLayout(jDialog3Layout);
        jDialog3Layout.setHorizontalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDialog3Layout.setVerticalGroup(
            jDialog3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jDialog4.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);

        jLabel51.setText("There seems to be conflicting cashbook and bank transactions that");

        jLabel52.setText(" the application is having problems with. Would you like to match them");

        jLabel53.setText("manually before calculations or allow the application to continue?");

        jButton31.setText("Match Transactions");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        jButton32.setText("Continue calculations");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog4Layout = new javax.swing.GroupLayout(jDialog4.getContentPane());
        jDialog4.getContentPane().setLayout(jDialog4Layout);
        jDialog4Layout.setHorizontalGroup(
            jDialog4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButton31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton32)
                .addGap(119, 119, 119))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog4Layout.createSequentialGroup()
                .addGroup(jDialog4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel52, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                    .addGroup(jDialog4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel51, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)))
                .addGap(30, 30, 30))
            .addGroup(jDialog4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel53)
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jDialog4Layout.setVerticalGroup(
            jDialog4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel51)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel52)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel53)
                .addGap(18, 18, 18)
                .addGroup(jDialog4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton31)
                    .addComponent(jButton32))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Reconciliation Software");

        jDesktopPane1.setBackground(new java.awt.Color(0, 51, 153));

        jToolBar1.setRollover(true);

        jButton1.setText("Cashbook entry");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setText("Bank entry");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jToolBar1.setBounds(0, 0, 200, 25);
        jDesktopPane1.add(jToolBar1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame1.setClosable(true);
        jInternalFrame1.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame1.setIconifiable(true);
        jInternalFrame1.setMaximizable(true);
        jInternalFrame1.setResizable(true);
        jInternalFrame1.setTitle("Cashbook entry");
        jInternalFrame1.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame1InternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jSpinner1.setModel(new javax.swing.SpinnerDateModel());

        jLabel1.setText("Date");

        jLabel2.setText("Narration");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setText("Ref. No.");

        jLabel4.setText("Type");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Credit", "Debit" }));

        jButton3.setText("Add Entry");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Value");

        jLabel19.setText("Balance");

        jLabel37.setText("Account Name");

        jLabel42.setForeground(new java.awt.Color(204, 0, 0));

        jLabel48.setText("Unique code");

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel37)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField1)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox13, 0, 196, Short.MAX_VALUE)
                                .addComponent(jScrollPane1))))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jButton3))
                            .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(78, 78, 78))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(12, 12, 12)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37))
                .addGap(18, 18, 18)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(8, 8, 8)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(7, 7, 7)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel48))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(18, 18, 18))
        );

        jInternalFrame1.setBounds(20, 30, 460, 360);
        jDesktopPane1.add(jInternalFrame1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame2.setClosable(true);
        jInternalFrame2.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame2.setIconifiable(true);
        jInternalFrame2.setMaximizable(true);
        jInternalFrame2.setResizable(true);
        jInternalFrame2.setTitle("Bank entry");
        jInternalFrame2.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame2InternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel10.setText("Date");

        jSpinner2.setModel(new javax.swing.SpinnerDateModel());

        jLabel11.setText("Particulars");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jLabel12.setText("Ref/Cheque No");

        jLabel13.setText("Bank Name");

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Debit", "Credit" }));

        jLabel14.setText("Type");

        jLabel15.setText("Balance");

        jButton7.setText("Add Entry");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel17.setText("Value");

        jLabel38.setText("Account Name");

        jLabel49.setText("Unique ID");

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jButton7))
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jInternalFrame2Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(31, 31, 31)
                                .addComponent(jComboBox3, 0, 243, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jInternalFrame2Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(47, 47, 47)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)
                            .addComponent(jLabel14)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(jLabel49)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                            .addComponent(jTextField7)))
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel38)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox14, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(122, 122, 122))
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(jComboBox14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel49)
                        .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton7)
                .addContainerGap())
        );

        jInternalFrame2.setBounds(0, 40, 450, 320);
        jDesktopPane1.add(jInternalFrame2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame3.setClosable(true);
        jInternalFrame3.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame3.setIconifiable(true);
        jInternalFrame3.setMaximizable(true);
        jInternalFrame3.setResizable(true);
        jInternalFrame3.setTitle("Reconcile");
        jInternalFrame3.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame3InternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "", "", "", ""
            }
        ));
        jScrollPane4.setViewportView(jTable2);
        jTable2.getColumnModel().getColumn(0).setPreferredWidth(300);
        jTable2.getColumnModel().getColumn(1).setPreferredWidth(15);
        jTable2.getColumnModel().getColumn(2).setPreferredWidth(15);
        jTable2.getColumnModel().getColumn(3).setPreferredWidth(15);

        jLabel16.setText("Prepare for end of");

        jButton8.setText("Prepare");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Prepare printable report");

        jButton10.setText("Dismiss");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        jLabel21.setText("Year. Leave blank to use present");

        javax.swing.GroupLayout jInternalFrame3Layout = new javax.swing.GroupLayout(jInternalFrame3.getContentPane());
        jInternalFrame3.getContentPane().setLayout(jInternalFrame3Layout);
        jInternalFrame3Layout.setHorizontalGroup(
            jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame3Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jButton10)
                .addGap(183, 183, 183))
            .addGroup(jInternalFrame3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                    .addGroup(jInternalFrame3Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21)
                        .addGap(18, 18, 18)
                        .addComponent(jButton8)))
                .addContainerGap())
        );
        jInternalFrame3Layout.setVerticalGroup(
            jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(jButton8))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jButton9))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jInternalFrame3.setBounds(20, 40, 450, 320);
        jDesktopPane1.add(jInternalFrame3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame4.setClosable(true);
        jInternalFrame4.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame4.setIconifiable(true);
        jInternalFrame4.setMaximizable(true);
        jInternalFrame4.setResizable(true);
        jInternalFrame4.setTitle("Upload bank statement");
        jInternalFrame4.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame4InternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel6.setText("Bank name");

        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        jLabel39.setText("Account Name");

        javax.swing.GroupLayout jInternalFrame4Layout = new javax.swing.GroupLayout(jInternalFrame4.getContentPane());
        jInternalFrame4.getContentPane().setLayout(jInternalFrame4Layout);
        jInternalFrame4Layout.setHorizontalGroup(
            jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame4Layout.createSequentialGroup()
                .addGroup(jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame4Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jInternalFrame4Layout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField18)))
                .addGap(28, 28, 28))
        );
        jInternalFrame4Layout.setVerticalGroup(
            jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jInternalFrame4.setBounds(10, 30, 400, 340);
        jDesktopPane1.add(jInternalFrame4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame5.setClosable(true);
        jInternalFrame5.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame5.setIconifiable(true);
        jInternalFrame5.setMaximizable(true);
        jInternalFrame5.setResizable(true);
        jInternalFrame5.setTitle("Upload cash book file");
        jInternalFrame5.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame5InternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jFileChooser2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser2ActionPerformed(evt);
            }
        });

        jLabel40.setText("Account Name");

        javax.swing.GroupLayout jInternalFrame5Layout = new javax.swing.GroupLayout(jInternalFrame5.getContentPane());
        jInternalFrame5.getContentPane().setLayout(jInternalFrame5Layout);
        jInternalFrame5Layout.setHorizontalGroup(
            jInternalFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame5Layout.createSequentialGroup()
                .addGroup(jInternalFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField19, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
                    .addGroup(jInternalFrame5Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jFileChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jInternalFrame5Layout.setVerticalGroup(
            jInternalFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jFileChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jInternalFrame5.setBounds(30, 40, 390, 290);
        jDesktopPane1.add(jInternalFrame5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame6.setClosable(true);
        jInternalFrame6.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame6.setIconifiable(true);
        jInternalFrame6.setMaximizable(true);
        jInternalFrame6.setResizable(true);
        jInternalFrame6.setTitle("Add Bank");
        jInternalFrame6.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame6InternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel7.setText("Bank Name");

        jLabel8.setText("Address/Branch");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Bank Name", "Address/Branch", "Account Name"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButton4.setText("Insert/Add");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Dismiss");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel34.setText("Account Name");

        javax.swing.GroupLayout jInternalFrame6Layout = new javax.swing.GroupLayout(jInternalFrame6.getContentPane());
        jInternalFrame6.getContentPane().setLayout(jInternalFrame6Layout);
        jInternalFrame6Layout.setHorizontalGroup(
            jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame6Layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addGap(66, 66, 66))
                    .addGroup(jInternalFrame6Layout.createSequentialGroup()
                        .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel34))
                        .addGap(18, 18, 18)
                        .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                            .addComponent(jButton4)
                            .addComponent(jTextField16, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jInternalFrame6Layout.setVerticalGroup(
            jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addGap(6, 6, 6))
        );

        jInternalFrame6.setBounds(20, 40, 420, 310);
        jDesktopPane1.add(jInternalFrame6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame7.setClosable(true);
        jInternalFrame7.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame7.setIconifiable(true);
        jInternalFrame7.setMaximizable(true);
        jInternalFrame7.setResizable(true);
        jInternalFrame7.setTitle("Detected transaction mistakes");
        jInternalFrame7.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame7InternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Details", "Value", "Actual Value"
            }
        ));
        jScrollPane5.setViewportView(jTable3);

        jButton12.setText("Dismiss");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jLabel18.setText("Values marked with asterix were detected as mistakes");

        javax.swing.GroupLayout jInternalFrame7Layout = new javax.swing.GroupLayout(jInternalFrame7.getContentPane());
        jInternalFrame7.getContentPane().setLayout(jInternalFrame7Layout);
        jInternalFrame7Layout.setHorizontalGroup(
            jInternalFrame7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame7Layout.createSequentialGroup()
                        .addGroup(jInternalFrame7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame7Layout.createSequentialGroup()
                        .addComponent(jButton12)
                        .addGap(86, 86, 86))))
        );
        jInternalFrame7Layout.setVerticalGroup(
            jInternalFrame7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame7Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton12)
                .addContainerGap())
        );

        jInternalFrame7.setBounds(10, 40, 500, 310);
        jDesktopPane1.add(jInternalFrame7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame8.setClosable(true);
        jInternalFrame8.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame8.setIconifiable(true);
        jInternalFrame8.setMaximizable(true);
        jInternalFrame8.setResizable(true);
        jInternalFrame8.setTitle("View CashBook Entries");
        jInternalFrame8.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame8InternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Ref No", "Particulars", "Type", "Value", "Balance"
            }
        ));
        jScrollPane6.setViewportView(jTable4);

        jButton13.setText("Dismiss");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jLabel36.setText("Select cashbook account");

        jButton27.setText("Load");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame8Layout = new javax.swing.GroupLayout(jInternalFrame8.getContentPane());
        jInternalFrame8.getContentPane().setLayout(jInternalFrame8Layout);
        jInternalFrame8Layout.setHorizontalGroup(
            jInternalFrame8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame8Layout.createSequentialGroup()
                .addGroup(jInternalFrame8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame8Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jButton13))
                    .addGroup(jInternalFrame8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE))
                    .addGroup(jInternalFrame8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel36)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox12, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton27)))
                .addContainerGap())
        );
        jInternalFrame8Layout.setVerticalGroup(
            jInternalFrame8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(jComboBox12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton27))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton13)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jInternalFrame8.setBounds(0, 30, 520, 330);
        jDesktopPane1.add(jInternalFrame8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame9.setClosable(true);
        jInternalFrame9.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame9.setIconifiable(true);
        jInternalFrame9.setMaximizable(true);
        jInternalFrame9.setResizable(true);
        jInternalFrame9.setTitle("View Bank Statement");
        jInternalFrame9.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame9InternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel20.setText("Select Bank");

        jButton14.setText("Display");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Particulars", "Ref No", "Type", "Value", "Balance"
            }
        ));
        jScrollPane7.setViewportView(jTable5);

        jButton15.setText("Dismiss");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jLabel41.setText("Account Name");

        javax.swing.GroupLayout jInternalFrame9Layout = new javax.swing.GroupLayout(jInternalFrame9.getContentPane());
        jInternalFrame9.getContentPane().setLayout(jInternalFrame9Layout);
        jInternalFrame9Layout.setHorizontalGroup(
            jInternalFrame9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame9Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton14)
                        .addContainerGap())
                    .addGroup(jInternalFrame9Layout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                        .addGap(21, 21, 21))))
            .addGroup(jInternalFrame9Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(jButton15)
                .addContainerGap(332, Short.MAX_VALUE))
            .addGroup(jInternalFrame9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel41)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox15, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jInternalFrame9Layout.setVerticalGroup(
            jInternalFrame9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame9Layout.createSequentialGroup()
                .addGroup(jInternalFrame9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jInternalFrame9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jInternalFrame9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel41)
                            .addComponent(jComboBox15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jInternalFrame9Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jButton14)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton15)
                .addGap(31, 31, 31))
        );

        jInternalFrame9.setBounds(10, 30, 490, 310);
        jDesktopPane1.add(jInternalFrame9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame10.setClosable(true);
        jInternalFrame10.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame10.setIconifiable(true);
        jInternalFrame10.setMaximizable(true);
        jInternalFrame10.setResizable(true);
        jInternalFrame10.setTitle("Details");

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"LODGEMENTS", null},
                {"Total CashBook Lodgements", null},
                {"Total Bank Lodgements", null},
                {"Deficit", null},
                {"WITHDRAWALS", null},
                {"Total CashBook Withdrawals", null},
                {"Total Bank withdrawals", null},
                {"Deficit", null},
                {"CASHBOOK", null},
                {"Balance from last month", null},
                {"New Balance", null},
                {"BANK", null},
                {"Balance from last month", null},
                {"New Balance", null}
            },
            new String [] {
                "Item", "Value"
            }
        ));
        jScrollPane8.setViewportView(jTable6);

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        jLabel22.setText("For");

        jButton16.setText("Prepare");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("Dismiss");

        javax.swing.GroupLayout jInternalFrame10Layout = new javax.swing.GroupLayout(jInternalFrame10.getContentPane());
        jInternalFrame10.getContentPane().setLayout(jInternalFrame10Layout);
        jInternalFrame10Layout.setHorizontalGroup(
            jInternalFrame10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame10Layout.createSequentialGroup()
                .addGroup(jInternalFrame10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame10Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel22)
                        .addGap(30, 30, 30)
                        .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton16))
                    .addGroup(jInternalFrame10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE))
                    .addGroup(jInternalFrame10Layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(jButton17)))
                .addContainerGap())
        );
        jInternalFrame10Layout.setVerticalGroup(
            jInternalFrame10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame10Layout.createSequentialGroup()
                .addGroup(jInternalFrame10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jButton16)
                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton17)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jInternalFrame10.setBounds(0, 30, 470, 340);
        jDesktopPane1.add(jInternalFrame10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame11.setClosable(true);
        jInternalFrame11.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame11.setIconifiable(true);
        jInternalFrame11.setMaximizable(true);
        jInternalFrame11.setTitle("Automated Method");
        jInternalFrame11.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame11InternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel23.setText("For");

        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        jButton11.setText("Prepare");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"BANK RECONCILIATION STATEMENT AS AT END OF THE PERIOD", null},
                {"BALANCE AS PER CASH BOOK AT THE END OF THE PERIOD", null},
                {"AWAITING JOURNALS", null},
                {"ADD LODGEMENTS (AS PER CASH BOOK AND BANK STATEMENT)", null},
                {"LESS WITHDRAWALS (AS PER CASH BOOK AND BANK STATEMENT)", null},
                {"ERRORS", null},
                {"EXCEPTIONS /SUM OF JOURNALS", null},
                {"CASHBOOK ERRORS", null},
                {"BALANCE AS PER ADJUSTED CASH BOOK AS AT END OF THE PERIOD", null},
                {"ADD UNCLEARED MANDATES/UNPRESENTED CHEQUES", null},
                {"LESS UNCREDITED LODGEMENTS OR CHEQUES", null},
                {"BANK ERRORS", null},
                {"BALANCE OBTAINED AFTER RECONCILIATION", null},
                {"BALANCE AS PER BANK STATEMENT AS AT END OF THE PERIOD", null},
                {"DIFFERENCE", null}
            },
            new String [] {
                "Item", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable7MouseClicked(evt);
            }
        });
        jTable7.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jTable7MouseMoved(evt);
            }
        });
        jScrollPane9.setViewportView(jTable7);

        jButton18.setText("Dismiss");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton24.setText("Prepare printable report");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame11Layout = new javax.swing.GroupLayout(jInternalFrame11.getContentPane());
        jInternalFrame11.getContentPane().setLayout(jInternalFrame11Layout);
        jInternalFrame11Layout.setHorizontalGroup(
            jInternalFrame11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame11Layout.createSequentialGroup()
                .addContainerGap(73, Short.MAX_VALUE)
                .addComponent(jButton24)
                .addGap(99, 99, 99)
                .addComponent(jButton18)
                .addGap(176, 176, 176))
            .addGroup(jInternalFrame11Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel23)
                .addGap(18, 18, 18)
                .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jComboBox11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(jButton11)
                .addContainerGap(229, Short.MAX_VALUE))
            .addGroup(jInternalFrame11Layout.createSequentialGroup()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                .addContainerGap())
        );
        jInternalFrame11Layout.setVerticalGroup(
            jInternalFrame11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(jButton11)
                    .addComponent(jComboBox11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton18)
                    .addComponent(jButton24))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jInternalFrame11.setBounds(30, 50, 580, 310);
        jDesktopPane1.add(jInternalFrame11, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame12.setClosable(true);
        jInternalFrame12.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame12.setIconifiable(true);
        jInternalFrame12.setMaximizable(true);
        jInternalFrame12.setTitle("Manual method (closing balance option)");

        jLabel24.setText("For");

        jComboBox9.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        jButton19.setText("Prepare");

        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"BANK RECONCILIATION STATEMENT ", null},
                {"PARTICULARS", null},
                {"BANK RECONCILIATION STATEMENT AS AT:", null},
                {"Closing Balance As Per Cash Book ", null},
                {"ADD LODGEMENTS: As Per Bank Statement But Not In Cash Book", null},
                {"LESS PAYMENTS: As Per Bank Statement But Not In Cash Book", null},
                {"LESS: Bank Charges", null},
                {"ADD/(LESS): Cash Book Error of Undercast/(Overcast) (lodgments)", null},
                {"ADD/(LESS): Cash Book Error of Overcast/Undercast (payments)", null},
                {"Closing Balance As Per Adjusted Cash Book:", null},
                {"ADD UNCLEARED MANDATESOR UN-PRESENTED CHEQUES:", null},
                {"For the current month", null},
                {"As at (end of previous period):", null},
                {"Less Cleared Mandates/Un-presented Cheques", null},
                {"Sub-total As at:", null},
                {"LESS UNCREDITED CHEQUES", null},
                {"For the current month:", null},
                {"As at (end of previous period):", null},
                {"Less Credited Cheques or Lodgements", null},
                {"Sub-total As at:", null},
                {"BANK ERRORS:", null},
                {"ADD/(LESS):Error of Overcast/Undercast (lodgement)", null},
                {"ADD/(LESS): Error of Undercast/Overcast (payment)", null},
                {"Sub-total of errors", null},
                {"Closing Balance As Per Bank Statement As At:", null},
                {"PREPARED BY:", null},
                {"SIGNATURE/DATE:", null}
            },
            new String [] {
                "Item", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable8MouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(jTable8);

        jButton20.setText("Dismiss");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame12Layout = new javax.swing.GroupLayout(jInternalFrame12.getContentPane());
        jInternalFrame12.getContentPane().setLayout(jInternalFrame12Layout);
        jInternalFrame12Layout.setHorizontalGroup(
            jInternalFrame12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame12Layout.createSequentialGroup()
                .addGroup(jInternalFrame12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame12Layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jLabel24)
                        .addGap(51, 51, 51)
                        .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(110, 110, 110)
                        .addComponent(jButton19))
                    .addGroup(jInternalFrame12Layout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(jButton20))
                    .addGroup(jInternalFrame12Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jInternalFrame12Layout.setVerticalGroup(
            jInternalFrame12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame12Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jInternalFrame12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton19)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton20)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jInternalFrame12.setBounds(20, 60, 660, 330);
        jDesktopPane1.add(jInternalFrame12, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            jInternalFrame12.setMaximum(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        jInternalFrame13.setClosable(true);
        jInternalFrame13.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame13.setIconifiable(true);
        jInternalFrame13.setMaximizable(true);
        jInternalFrame13.setTitle("Manual Method (Opening balance alternative)");

        jLabel25.setText("For");

        jComboBox10.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        jButton21.setText("Prepare");

        jTable9.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"PARTICULARS", "N"},
                {"Opening Balance As Per Cash Book", null},
                {"ADD LODGEMENT:", null},
                {"As Per Cash Book & Bank Statement (a)", null},
                {"As Per Cash Book But Not in Bank Statement (b)", null},
                {"As Per Bank Statement But Not In Cash Book  (c)", null},
                {"CASH BOOK ERRORS from a & b", null},
                {"ADD: ERROR OF UNDERCASTING ", null},
                {"LESS: ERROR OF OVERCASTING ", null},
                {"SUB-TOTAL", null},
                {"LESS WITHDRAWAL", null},
                {"As Per Cash Book & Bank Statement (d)", null},
                {"As Per Cash Book But Not in Bank Statement (e)", null},
                {"As Per Bank Statement But Not In Cash Book   (f)", null},
                {"Bank Charges (g)", null},
                {"CASH BOOK ERRORS from d & e", null},
                {"ADD: ERROR OF UNDERCASTING", null},
                {"LESS: ERROR OF OVERCASTING", null},
                {"SUB-TOTAL", null},
                {"Balance As Per Adjusted Cash Book As At:", null},
                {"ADD UNCLEARED MANDATES", null},
                {"For the current month", null},
                {"As at (end of previous period):", null},
                {"Less Cleared Mandates ", null},
                {"Sub-total As at:", null},
                {"LESS UNCREDITED CHEQUES", null},
                {"For the current month:", null},
                {"As at (end of previous period):", null},
                {"Less Credited Cheques or Lodgements ", null},
                {"Sub-total As at:", null},
                {"BANK ERRORS:", null},
                {"ADD ERROR OF OVER CAST (lodgement)", null},
                {"LESS ERROR OF UNDER CAST (lodgement)", null},
                {"LESS ERROR OF OVER CAST (payment)", null},
                {"ADD ERROR OF UNDER CAST (payment)", null},
                {"Sub-total of errors", null},
                {"Balance As Per Bank Statement As At:", null},
                {"PREPARED BY:", null},
                {"SIGNATURE/DATE:", null}
            },
            new String [] {
                "Item", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable9MouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(jTable9);

        jButton22.setText("Dismiss");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame13Layout = new javax.swing.GroupLayout(jInternalFrame13.getContentPane());
        jInternalFrame13.getContentPane().setLayout(jInternalFrame13Layout);
        jInternalFrame13Layout.setHorizontalGroup(
            jInternalFrame13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame13Layout.createSequentialGroup()
                .addGroup(jInternalFrame13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame13Layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jLabel25)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jButton21))
                    .addGroup(jInternalFrame13Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE))
                    .addGroup(jInternalFrame13Layout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addComponent(jButton22)))
                .addContainerGap())
        );
        jInternalFrame13Layout.setVerticalGroup(
            jInternalFrame13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(jButton21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton22)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jInternalFrame13.setBounds(40, 60, 660, 340);
        jDesktopPane1.add(jInternalFrame13, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            jInternalFrame13.setMaximum(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        jInternalFrame14.setBorder(null);
        jInternalFrame14.setClosable(true);
        jInternalFrame14.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame14.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame14InternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel28.setText("Please fill in the cell adresses containing the data below");

        jLabel29.setText("Date");

        jLabel30.setText("Particulars");

        jLabel31.setText("Ref No");

        jLabel32.setText("Value (Credit)");

        jLabel33.setText("Value (Debit)");

        jTextField11.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11CaretUpdate(evt);
            }
        });

        jTextField12.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField12CaretUpdate(evt);
            }
        });
        jTextField12.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jTextField12ComponentAdded(evt);
            }
        });
        jTextField12.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextField12InputMethodTextChanged(evt);
            }
        });

        jTextField13.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField13CaretUpdate(evt);
            }
        });

        jTextField14.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField14CaretUpdate(evt);
            }
        });

        jTextField15.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField15CaretUpdate(evt);
            }
        });

        jButton25.setText("Ok");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jTextField20.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField20CaretUpdate(evt);
            }
        });

        jLabel46.setText("Balance");

        jLabel47.setText("Unique code");

        javax.swing.GroupLayout jInternalFrame14Layout = new javax.swing.GroupLayout(jInternalFrame14.getContentPane());
        jInternalFrame14.getContentPane().setLayout(jInternalFrame14Layout);
        jInternalFrame14Layout.setHorizontalGroup(
            jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame14Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel28)
                    .addGroup(jInternalFrame14Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jInternalFrame14Layout.createSequentialGroup()
                                .addGroup(jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel30)
                                    .addComponent(jLabel29)
                                    .addComponent(jLabel32)
                                    .addComponent(jLabel31)
                                    .addComponent(jLabel47))
                                .addGap(4, 4, 4))
                            .addGroup(jInternalFrame14Layout.createSequentialGroup()
                                .addGroup(jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel33)
                                    .addComponent(jLabel46))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField21, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(jTextField15, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(jTextField14, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(jTextField13, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(jTextField12, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(jTextField11, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(jTextField20, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE))
                        .addGap(21, 21, 21)
                        .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)))
                .addGap(56, 56, 56))
        );
        jInternalFrame14Layout.setVerticalGroup(
            jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame14Layout.createSequentialGroup()
                .addComponent(jLabel28)
                .addGroup(jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame14Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel31))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel32)))
                    .addGroup(jInternalFrame14Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jButton25, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel47)
                    .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );

        jInternalFrame14.setBounds(260, 130, 320, 200);
        jDesktopPane1.add(jInternalFrame14, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame15.setClosable(true);
        jInternalFrame15.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame15.setIconifiable(true);
        jInternalFrame15.setMaximizable(true);
        jInternalFrame15.setResizable(true);
        jInternalFrame15.setTitle("CashBook Account");

        jLabel35.setText("Enter the name/caption for the cashbook account");

        jButton26.setText("Insert");

        javax.swing.GroupLayout jInternalFrame15Layout = new javax.swing.GroupLayout(jInternalFrame15.getContentPane());
        jInternalFrame15.getContentPane().setLayout(jInternalFrame15Layout);
        jInternalFrame15Layout.setHorizontalGroup(
            jInternalFrame15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame15Layout.createSequentialGroup()
                .addGroup(jInternalFrame15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame15Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jInternalFrame15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField17, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                            .addComponent(jLabel35)))
                    .addGroup(jInternalFrame15Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jButton26)))
                .addContainerGap())
        );
        jInternalFrame15Layout.setVerticalGroup(
            jInternalFrame15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel35)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(jButton26)
                .addGap(50, 50, 50))
        );

        jInternalFrame15.setBounds(150, 120, 410, 210);
        jDesktopPane1.add(jInternalFrame15, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame16.setClosable(true);
        jInternalFrame16.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame16.setIconifiable(true);
        jInternalFrame16.setMaximizable(true);
        jInternalFrame16.setResizable(true);
        jInternalFrame16.setTitle("Select accounts to be reconciled");
        jInternalFrame16.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame16InternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Bank Account Details"));

        jLabel43.setText("Bank Name");

        jLabel44.setText("Account Name");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel44)
                    .addComponent(jLabel43))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox16, 0, 323, Short.MAX_VALUE)
                    .addComponent(jComboBox17, 0, 323, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(jComboBox16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(jComboBox17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("CashBook Detail"));

        jLabel45.setText("Account Name/Caption");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel45)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox18, 0, 278, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(jComboBox18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jButton28.setText("Ok");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame16Layout = new javax.swing.GroupLayout(jInternalFrame16.getContentPane());
        jInternalFrame16.getContentPane().setLayout(jInternalFrame16Layout);
        jInternalFrame16Layout.setHorizontalGroup(
            jInternalFrame16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame16Layout.createSequentialGroup()
                .addGroup(jInternalFrame16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame16Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jInternalFrame16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jInternalFrame16Layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(jButton28)))
                .addContainerGap())
        );
        jInternalFrame16Layout.setVerticalGroup(
            jInternalFrame16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton28)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jInternalFrame16.setBounds(140, 60, 460, 280);
        jDesktopPane1.add(jInternalFrame16, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jInternalFrame17.setClosable(true);
        jInternalFrame17.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame17.setIconifiable(true);
        jInternalFrame17.setMaximizable(true);
        jInternalFrame17.setResizable(true);
        jInternalFrame17.setTitle("Match Transactions");
        jInternalFrame17.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame17InternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel50.setText("Select a cashbook particulars and match it to the correct bank transaction");

        jButton29.setText("Match to selected");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        jButton30.setText("Close");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        jLabel54.setText("Select the correct bank transaction here");

        javax.swing.GroupLayout jInternalFrame17Layout = new javax.swing.GroupLayout(jInternalFrame17.getContentPane());
        jInternalFrame17.getContentPane().setLayout(jInternalFrame17Layout);
        jInternalFrame17Layout.setHorizontalGroup(
            jInternalFrame17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel54)
                    .addComponent(jComboBox20, 0, 514, Short.MAX_VALUE)
                    .addGroup(jInternalFrame17Layout.createSequentialGroup()
                        .addComponent(jButton29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 338, Short.MAX_VALUE)
                        .addComponent(jButton30))
                    .addComponent(jComboBox19, 0, 514, Short.MAX_VALUE)
                    .addComponent(jLabel50))
                .addContainerGap())
        );
        jInternalFrame17Layout.setVerticalGroup(
            jInternalFrame17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame17Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel50)
                .addGap(18, 18, 18)
                .addComponent(jComboBox19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel54)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jInternalFrame17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton29)
                    .addComponent(jButton30))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jInternalFrame17.setBounds(30, 60, 550, 230);
        jDesktopPane1.add(jInternalFrame17, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jMenu1.setText("Cashbook");

        jMenuItem1.setText("Add cashbook entry");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem6.setText("Upload cash book file");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem9.setText("View CashBook entries");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuItem14.setText("Add a CahBook Account");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem14);

        jMenuItem4.setText("Exit");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Bank Operations");

        jMenuItem2.setText("Add bank statement entry");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Upload bank statement");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem7.setText("Add a bank account");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem10.setText("View statement");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Reconcile");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        jMenuItem11.setText("Automated Method");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem11);

        jMenuItem8.setText("Detect Transaction Mistakes");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem5.setText("Match cashbook and bank transactions");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuItem12.setText("Manual method (closing balance option)");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem12);

        jMenuItem13.setText("Manual method (opening balance alternative)");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem13);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
System.exit(0);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
jInternalFrame1.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
jInternalFrame2.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
jInternalFrame1.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
jInternalFrame2.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
jInternalFrame4.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

public void deleteReports() {
File f = new File(".");
File[] p = f.listFiles();
for (int i = 0; i <= p.length-1; i++) {
if ((p[i].isFile())&&(p[i].getAbsolutePath().contains(".html"))) p[i].delete();
}
}

    private void jFileChooser2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser2ActionPerformed
if (evt.getActionCommand().equals(jFileChooser2.APPROVE_SELECTION)) {
try {
upload = jFileChooser2.getSelectedFile();type = "cashbook";
}
catch (Exception e) {}
jInternalFrame5.setVisible(false);
jInternalFrame14.setVisible(true);
}
else jInternalFrame5.setVisible(false);

    }//GEN-LAST:event_jFileChooser2ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
jInternalFrame5.setVisible(true);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
jInternalFrame6.setVisible(true);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

public void printReport(String[][] s, int no, String path, String client) {
 BufferedWriter out = null;
 String hhhh[] = path.split(".");
 String k = "<html><head><title>BANK RECONCILIATION STATEMENT</title>";
k = k + "<style type=text/css><!-- .style10 {font-family: Arial, Helvetica, sans-serif; font-size: 12px; }.style11 {font-family: Agency FB, Juice ITC; font-size: 24px; }--></style>";
k = k + "</head><body>";
k = k + "<div align=center style=border:double><strong><span class=style11>BANK RECONCILIATION STATEMENT</span></strong></div>";
k = k + "<p><span class=style10>PERIOD:" + path + "</span></p><table width=630 border=0>";

k = k + "<tr><th><span class=style10>Item</span></th>";
k = k + "<th><span class=style10>Value</span></th>";
k = k + "</tr>";
for (int z = 1; z <= s.length-1; z++) {
k = k + "<tr><th><span class=style10>" + s[z][0] + "</span></th>";
k = k + "<th><span class=style10>" + s[z][1] + "</span></th>";
k = k + "</tr>";
}
k = k + "</tr></table></body></html>";

try {
File file = new File(path);
if (file.exists()) file.delete();
out = new BufferedWriter(new FileWriter(file,true));
out.write(k);
out.close();
} catch(IOException e) {}
}


public void openReport(String url) {
try {
File htmlFile = new File(url);
Desktop.getDesktop().browse(htmlFile.toURI());
}
catch (Exception e) {}
}

public void loadBanks() {
for (int ss = 0; ss <= jTable1.getRowCount()-1; ss++) {
for (int tt = 0; tt <= jTable1.getColumnCount()-1; tt++) {
jTable1.setValueAt("", ss, tt);
}
}
try {
int a = 0;
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
PreparedStatement preparedStatement = null;
String selTable = "SELECT * FROM BankList";
rs = s.executeQuery(selTable);
while (rs.next()) {
jTable1.setValueAt(rs.getString("BankName"), a, 0);
jTable1.setValueAt(rs.getString("Address"), a, 1);
a++;
}
}
catch (Exception e) {
//e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
}

    private void jInternalFrame6InternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame6InternalFrameActivated
loadBanks();
    }//GEN-LAST:event_jInternalFrame6InternalFrameActivated

    private void jInternalFrame4InternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame4InternalFrameActivated
jFileChooser1.setFileFilter(new FileFilter() {
@Override
public boolean accept(File f) {
if ((f.getName().endsWith(".xls"))||(f.isDirectory())) return true;
else return false;
}
@Override
public String getDescription() {
return ".xls";
}
});
try {
jComboBox2.removeAllItems();
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
PreparedStatement preparedStatement = null;
String selTable = "SELECT * FROM BankList";
rs = s.executeQuery(selTable);
while (rs.next()) {
String bankname = rs.getString("BankName");
boolean fillit = true;
for (int i = 0; i < jComboBox2.getItemCount(); i++) {
if ((bankname == (String)jComboBox2.getItemAt(i))||(bankname == null)||(bankname == "")) fillit = false;
}
if (fillit) jComboBox2.addItem(bankname);
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
    }//GEN-LAST:event_jInternalFrame4InternalFrameActivated

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
java.util.Date g = (java.util.Date)jSpinner1.getValue();
String date1 = g.getDate()+ "/" + (g.getMonth()+1) + "/" + (g.getYear()+1900);
String acctname = (String)jComboBox13.getSelectedItem();
String narration = jTextArea1.getText();
String type = (String)jComboBox1.getSelectedItem();
String refno = jTextField1.getText();
String uniquecode = jTextField22.getText();
double value = new Double(jTextField2.getText()).doubleValue();
double balance = new Double(jTextField8.getText()).doubleValue();
if (acctname != null) {
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
preparedStatement = conn.prepareStatement("insert into CashBook values(?, ?, ?, ?, ?, ?, ?, ?)");
preparedStatement.setString(1, date1);
preparedStatement.setString(2, acctname);
preparedStatement.setString(3, narration);
preparedStatement.setString(4, refno);
preparedStatement.setString(5, type);
preparedStatement.setDouble(6, value);
preparedStatement.setDouble(7, balance);
preparedStatement.setString(8, uniquecode);
preparedStatement.execute();
}
catch (Exception e) {
e.printStackTrace();
jDialog1.setLocationRelativeTo(this);
jLabel9.setText("Unsuccessful!!");
jDialog1.setVisible(true);
}
finally {
try {
conn.close();
preparedStatement.close();
if (jLabel9.getText().equals("Unsuccessful!!")) return;
}
catch (Exception e2) {}
jInternalFrame1.setVisible(false);
jTextField1.setText("");
jTextField2.setText("");
jTextArea1.setText("");
jDialog1.setLocationRelativeTo(this);
jLabel9.setText("Successful!!");
jDialog1.setVisible(true);
jLabel42.setText("");
}
}
else {
jLabel42.setText("Problems here");
}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
jDialog1.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jInternalFrame2InternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame2InternalFrameActivated
jInternalFrame2.setSize(450, 342);
try {
jComboBox3.removeAllItems();
jComboBox14.removeAllItems();
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
PreparedStatement preparedStatement = null;
String selTable = "SELECT * FROM BankList";
rs = s.executeQuery(selTable);
while (rs.next()) {
String accountname = rs.getString("AccountName");
String bankname = rs.getString("BankName");
boolean fillit = true;
for (int i = 0; i <= jComboBox14.getItemCount()-1; i++) {
if ((accountname == (String)jComboBox14.getItemAt(i))||(accountname == null)||(accountname == "")) fillit = false;
}
boolean fillit2 = true;
for (int j = 0; j <= jComboBox3.getItemCount()-1; j++) {
if ((bankname == (String)jComboBox3.getItemAt(j))||(bankname == null)||(bankname == "")) fillit2 = false;
}
if (fillit) jComboBox14.addItem(accountname);
if (fillit2) jComboBox3.addItem(bankname);
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
    }//GEN-LAST:event_jInternalFrame2InternalFrameActivated

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
jInternalFrame10.setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jInternalFrame3InternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame3InternalFrameActivated
jInternalFrame3.setSize(588, 400);
jTable2.setValueAt("PARTICULARS", 0, 0);
jTable2.setValueAt("Balance as per cash book as at ", 1, 0);
jTable2.setValueAt("ADD LODGEMENT", 2, 0);
jTable2.setValueAt("As per Cash Book & Bank Statement", 3, 0);
jTable2.setValueAt("As per Cash Book not in Bank Statement", 4, 0);
jTable2.setValueAt("As per Bank Statement not in Cash Book", 5, 0);
jTable2.setValueAt("CASH BOOK ERRORS", 6, 0);
jTable2.setValueAt("ADD:Error of Undercasting",7, 0);
jTable2.setValueAt("LESS: Error of Overcasting", 8, 0);
jTable2.setValueAt("SUB-TOTAL", 9, 0);
jTable2.setValueAt("LESS WITHDRAWAL", 10, 0);
jTable2.setValueAt("As per Cash Book & Bank Statement", 8, 0);
jTable2.setValueAt("As per Cash Book not in Bank Statement", 9, 0);
jTable2.setValueAt("As per bank Statement not in Cash Book", 10, 0);
jTable2.setValueAt("Bank Charges", 11, 0);
jTable2.setValueAt("CASH BOOK ERRORS", 12, 0);
jTable2.setValueAt("ADD: ERROR OF UNDERCAST", 13, 0);
jTable2.setValueAt("LESS: ERROR OF OVERCASTING", 14, 0);
jTable2.setValueAt("SUB-TOTAL", 15, 0);
jTable2.setValueAt("Balance as per adjusted Cash Book as at", 16, 0);
jTable2.setValueAt("MAIN BANK RECONCILIATION STATEMENT AS AT ", 17, 0);
jTable2.setValueAt("Balance as per adjusted Cash Book as at", 18, 0);
jTable2.setValueAt("ADD UNCLEARED MANDATE", 19, 0);
jTable2.setValueAt("for the month of", 20, 0);
jTable2.setValueAt("As at", 21, 0);
jTable2.setValueAt("Less Cleared Mandate", 22, 0);
jTable2.setValueAt("As at", 23, 0);
jTable2.setValueAt("LESS UNCREDITED CHEQUES", 24, 0);
jTable2.setValueAt("For the month of", 25, 0);
jTable2.setValueAt("As at", 26, 0);
jTable2.setValueAt("Less credited cheques", 27, 0);
jTable2.setValueAt("Sub-total As at", 28, 0);
jTable2.setValueAt("BANK ERRORS", 29, 0);
jTable2.setValueAt("ADD ERROR OF OVERCAST (lodgement)", 30, 0);
jTable2.setValueAt("LESS ERROR OF UNDERCAST (lodgement)", 31, 0);
jTable2.setValueAt("LESS ERROR OF OVERCAST (payment)", 32, 0);
jTable2.setValueAt("ADD ERROR OF UNDERCAST (payment)", 33, 0);
jTable2.setValueAt("Sub-Total of errors", 34, 0);
jTable2.setValueAt("BANK ERRORS", 35, 0);
jTable2.setValueAt("ADD ERROR OF UNDER CASTING (payment)", 36, 0);
jTable2.setValueAt("Balance as per Bank Statement as at", 37, 0);
jTable2.setValueAt("SUPERVISOR SIGNATURE/DATE:", 38, 0);
    }//GEN-LAST:event_jInternalFrame3InternalFrameActivated

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
String bank = jTextField4.getText();
String address = jTextField5.getText();
String acctname = jTextField16.getText();
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
preparedStatement = conn.prepareStatement("insert into BankList values(?, ?, ?)");
preparedStatement.setString(1, bank);
preparedStatement.setString(2, address);
preparedStatement.setString(3, acctname);
preparedStatement.execute();
}
catch (Exception e) {
e.printStackTrace();
jDialog1.setLocationRelativeTo(this);
jLabel9.setText("Unsuccessful!!");
jDialog1.setVisible(true);
}
finally {
try {
conn.close();
preparedStatement.close();
if (jLabel9.getText().equals("Unsuccessful!!")) return;
}
catch (Exception e2) {}
jTextField4.setText("");
jTextField5.setText("");
jDialog1.setLocationRelativeTo(this);
jLabel9.setText("Successful!!");
jDialog1.setVisible(true);
}
loadBanks();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
jInternalFrame6.setVisible(false);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
java.util.Date g = (java.util.Date)jSpinner2.getValue();
String date = g.getDate()+"/" + (g.getMonth()+1) + "/" + (g.getYear()+1900);
String acctname = (String)jComboBox14.getSelectedItem();
String narration = jTextArea2.getText();
String type = (String)jComboBox4.getSelectedItem();
String refno = jTextField3.getText();
String uniquecode = jTextField23.getText();
double value = new Double(jTextField7.getText()).doubleValue();
double balance = new Double(jTextField6.getText()).doubleValue();
String bank = (String)jComboBox3.getSelectedItem();
if (acctname != null) {
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
preparedStatement = conn.prepareStatement("insert into BankStatement values(?, ?, ?, ?, ?, ?, ?, ?, ?)");
preparedStatement.setString(1, date);
preparedStatement.setString(2, acctname);
preparedStatement.setString(3, narration);
preparedStatement.setString(4, refno);
preparedStatement.setString(5, type);
preparedStatement.setDouble(6, value);
preparedStatement.setDouble(7, balance);
preparedStatement.setString(8, bank);
preparedStatement.setString(9, uniquecode);
preparedStatement.execute();
}
catch (Exception e) {
e.printStackTrace();
jDialog1.setLocationRelativeTo(this);
jLabel9.setText("Unsuccessful!!");
jDialog1.setVisible(true);
}
finally {
try {
conn.close();
preparedStatement.close();
if (jLabel9.getText().equals("Unsuccessful!!")) return;
}
catch (Exception e2) {}
}
}
else {
}
jInternalFrame2.setVisible(false);
jTextField7.setText("");
jTextField6.setText("");
jTextField3.setText("");
jTextArea2.setText("");
jDialog1.setLocationRelativeTo(this);
jLabel9.setText("Successful!!");
jDialog1.setVisible(true);

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
jInternalFrame7.setVisible(false);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
jInternalFrame7.setVisible(true);
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
jInternalFrame3.setVisible(false);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
jInternalFrame8.setVisible(true);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
jInternalFrame9.setVisible(true);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
jInternalFrame8.setVisible(false);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
jInternalFrame9.setVisible(false);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jInternalFrame9InternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame9InternalFrameActivated
try {
jComboBox5.removeAllItems();
jComboBox15.removeAllItems();
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
PreparedStatement preparedStatement = null;
String selTable = "SELECT * FROM BankList";
rs = s.executeQuery(selTable);
while (rs.next()) {
String bankname = rs.getString("BankName");
boolean fillit = true;
for (int i = 0; i < jComboBox5.getItemCount(); i++) {
if ((bankname == (String)jComboBox5.getItemAt(i))||(bankname == null)||(bankname == "")) fillit = false;
}
String accountname = rs.getString("AccountName");
boolean fillit2 = true;
for (int j = 0; j < jComboBox15.getItemCount(); j++) {
if ((accountname == (String)jComboBox15.getItemAt(j))||(accountname == null)||(accountname == "")) fillit2 = false;
}
if (fillit) jComboBox5.addItem(bankname);
if (fillit2) jComboBox15.addItem(accountname);
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
    }//GEN-LAST:event_jInternalFrame9InternalFrameActivated

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
for (int ss = 0; ss <= jTable5.getRowCount()-1; ss++) {
for (int tt = 0; tt <= jTable5.getColumnCount()-1; tt++) {
jTable5.setValueAt("", ss, tt);
}
}
try {
int a = 0;
String bank = (String)jComboBox5.getSelectedItem();
String acctname = (String)jComboBox15.getSelectedItem();
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE Bank = ? AND AccountName = ?");
preparedStatement.setString(1, bank);
preparedStatement.setString(2, acctname);
rs = preparedStatement.executeQuery();
while (rs.next()) {
java.sql.Date rr = rs.getDate("Date");
jTable5.setValueAt(rr.getDate() + "/" + (rr.getMonth()+1) + "/" + (rr.getYear()+1900), a, 0);
jTable5.setValueAt(rs.getString("Particulars"), a, 1);
jTable5.setValueAt(rs.getString("RefNo"), a, 2);
jTable5.setValueAt(rs.getString("Type"), a, 3);
jTable5.setValueAt(rs.getString("Value"), a, 4);
jTable5.setValueAt(rs.getString("Balance"), a, 5);
a++;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
jInternalFrame7.setVisible(true);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

double getTotalLodgementsCashBook(int month, int year, String account_name) {
double returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM CashBook WHERE month(Date) = ? AND year(Date) = ?  and AccountName = ? and Type = 'Credit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
returnee += rs.getDouble("Value");
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
return returnee;
}

double getTotalWithdrawsCashBook(int month, int year, String account_name) {
double returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM CashBook WHERE month(Date) = ? AND year(Date) = ? and AccountName = ? and Type = 'Debit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
System.out.println("strike");
returnee += rs.getDouble("Value");
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
return returnee;
}

double getTotalLodgementsBank(int month, int year, String bank_name, String account_name) {
double returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE month(Date) = ? and year(Date) = ? and Bank = ? and AccountName = ? and Type = 'Credit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, bank_name);
preparedStatement.setString(4, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
double val = rs.getDouble("Value");
returnee += val;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
return returnee;
}

double getTotalWithdrawsBank(int month, int year, String bank_name, String account_name) {
double returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE month(Date) = ? and year(Date) = ? and AccountName = ? and Bank = ? and Type = 'Credit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, account_name);
preparedStatement.setString(4, bank_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
double val = rs.getDouble("Value");
returnee += val;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
return returnee;
}

double getBalanceAtMonthEndCashBook(int month, int year, String account_name) {
double returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM CashBook WHERE month(Date) = ? and year(Date) = ? and AccountName = ? order by Date");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
returnee = rs.getDouble("Balance");
returnee += rs.getDouble("Value");
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
return returnee;
}

double getBalanceAtMonthEndBank(int month, int year, String bank_name, String account_name) {
double returnee = 0;
boolean clu = true;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE month(Date) = ? and year(Date) = ? and Bank = ? and AccountName = ? order by Date");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, bank_name);
preparedStatement.setString(4, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
if (clu) {returnee = rs.getDouble("Balance");clu = false;}
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
return returnee;
}

String getMonth(int month) {
if (month == 1) return "January";
if (month == 2) return "February";
if (month == 3) return "March";
if (month == 4) return "April";
if (month == 5) return "May";
if (month == 6) return "June";
if (month == 7) return "July";
if (month == 8) return "August";
if (month == 9) return "September";
if (month == 10) return "October";
if (month == 11) return "November";
if (month == 12) return "December";
return null;
}

double getBankValue(String ss) {
double rr = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE Particulars = ?");
preparedStatement.setString(1, ss);
rs = preparedStatement.executeQuery();
while (rs.next()) {
rr = Double.valueOf(rs.getString("Value"));
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
return rr;
}
}

double getCashbookValue(String ss) {
double rr = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM CashBook WHERE Particulars = ?");
preparedStatement.setString(1, ss);
rs = preparedStatement.executeQuery();
while (rs.next()) {
rr = Double.valueOf(rs.getString("Value"));
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
return rr;
}
}

String[][] getCashBookTransactions(int month, int year, String account_name, boolean credit) {
int a = 0;
String cshbklodgements[][] = null;
if  (!credit) cshbklodgements = new String[getNoWithdrawsCashBook(month, year, account_name)][4];
else cshbklodgements = new String[getNoLodgementsCashBook(month, year, account_name)][4];
if (cshbklodgements.length > 0) {
//System.out.println("CashBookTransactsion=" + cshbklodgements.length);
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
if (credit) preparedStatement = conn.prepareStatement("SELECT * FROM CashBook WHERE month(Date) = ? and  year(Date) = ? and AccountName = ? and Type = 'Credit'");
else preparedStatement = conn.prepareStatement("SELECT * FROM CashBook WHERE month(Date) = ? and  year(Date) = ? and AccountName = ? and Type = 'Debit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
java.sql.Date rr = rs.getDate("Date");
cshbklodgements[a][0] = rr.getDate() + "/" + (rr.getMonth() + 1) + "/" + (rr.getYear() + 1900);
cshbklodgements[a][1] = rs.getString("Particulars");
cshbklodgements[a][2] = rs.getString("Value");
cshbklodgements[a][3] = rs.getString("UniqueCode");
a++;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
}
return cshbklodgements;
}

String[][] getBankTransactions(int month, int year, String bank_name, String account_name, boolean credit) {
String banklodgements[][] = null;
if (credit) banklodgements = new String[getNoLodgementsBank(month, year, bank_name, account_name)][4];
else banklodgements = new String[getNoWithdrawsBank(month, year, bank_name, account_name)][4];
if (banklodgements.length > 0) {
//System.out.println("BankTransactsion=" + banklodgements.length);
try {
int a = 0;
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
if (credit) preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE month(Date) = ? and year(Date) = ? and Bank = ? and AccountName = ? and Type = 'Credit'");
else preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE month(Date) = ? and year(Date) = ? and Bank = ? and AccountName = ? and Type = 'Debit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, bank_name);
preparedStatement.setString(4, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
java.sql.Date rr = rs.getDate("Date");
banklodgements[a][0] = rr.getDate() + "/" + (rr.getMonth() + 1) + "/" + (rr.getYear() + 1900);
banklodgements[a][1] = rs.getString("Particulars");
banklodgements[a][2] = rs.getString("Value");
banklodgements[a][3] = rs.getString("UniqueCode");
a++;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
}
return banklodgements;
}

double getTotalChequesBankDebit(int month, int year, String bank_name, String account_name) {
double returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE month(Date) = ? and year(Date) = ? and Bank = ? and AccountName = ? and Particulars like '%cheque%' or Particulars like '%chq%' and Type = 'Debit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, bank_name);
preparedStatement.setString(4, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
double val = rs.getDouble("Value");
returnee += val;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
return returnee;
}

double getTotalChequesCashBookDebit(int month, int year, String account_name) {
double returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM CashBook WHERE month(Date) = ? and year(Date) = ? and AccountName = ? and Particulars like '%cheque%' or Particulars like '%chq%' and Type = 'Debit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
returnee += rs.getDouble("Value");
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
return returnee;
}

double getTotalChequesBankCredit(int month, int year, String bank_name, String account_name) {
double returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE month(Date) = ? and year(Date) = ? and Bank = ? and AccountName = ? and Particulars like '%cheque%' or Particulars like '%chq%' and Type = 'Credit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, bank_name);
preparedStatement.setString(4, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
double val = rs.getDouble("Value");
returnee += val;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
return returnee;
}

double getTotalChequesCashBookCredit(int month, int year, String account_name) {
double returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM CashBook WHERE month(Date) = ? and year(Date) = ? and AccountName = ? and Particulars like '%cheque%' or Particulars like '%chq%' and Type = 'Credit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
returnee += rs.getDouble("Value");
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
return returnee;
}

int matchCashBookAndBank(String[][] csh, String[][] bnk) {
int returnee = 0;boolean match = false;
for (int q = 0; q <= bnk.length-1; q++) {
int returner = 0;
for (int r = 0; r <= csh.length-1; r++) {
double cshbk = new Double(csh[r][2]).doubleValue();
double bankk = new Double(bnk[q][2]).doubleValue();
long r1 = Date.parse(bnk[q][0]);long r2 = Date.parse(csh[r][0]);
if ((cshbk == bankk)&&(matchedTransactions(bnk[q][1], csh[r][1]))) {match = true;}
else {
if (matchInTransactions(bnk[q][1], csh[r][1])) {if ((r1 == r2)&&(cshbk == bankk)&&(matchParticulars(bnk[q][1], csh[r][1]))) {returner ++;match = true;}}
else if ((findBankMatch(cshbk, "Credit"))&&(matchUniqueCodes(bnk[q][3], csh[r][3]))) {returner ++;match = true;}
}
}
match = false;
if (returner > returnee) returnee = returner;
}
return returnee;
}

double matchCashBookAnd_Bank(String[][] csh, String[][] bnk) {
double returnee  = 0; boolean match = false;
for (int q = 0; q <= bnk.length-1; q++) {
for (int r = 0; r <= csh.length-1; r++) {
double cshbk = new Double(csh[r][2]).doubleValue();
double bankk = new Double(bnk[q][2]).doubleValue();
long r1 = Date.parse(bnk[q][0]);long r2 = Date.parse(csh[r][0]);
if ((!match)&&(cshbk == bankk)&&(matchedTransactions(bnk[q][1], csh[r][1]))) {returnee += cshbk;match = true;}
else {
if (matchInTransactions(bnk[q][1], csh[r][1])) {if ((!match)&&(r1 == r2)&&(cshbk == bankk)&&(matchParticulars(bnk[q][1], csh[r][1]))) {returnee += cshbk;match = true;}}
else if ((!match)&&(findBankMatch(cshbk, "Credit"))&&(matchUniqueCodes(bnk[q][3], csh[r][3]))) {returnee += cshbk;match = true;}
}
}
match = false;
}
return returnee;
}

String matchCashBook_AndBank(String[][] csh, String[][] bnk) {
String returnee = ""; boolean match = false;
for (int q = 0; q <= bnk.length-1; q++) {
for (int r = 0; r <= csh.length-1; r++) {
double cshbk = new Double(csh[r][2]).doubleValue();
double bankk = new Double(bnk[q][2]).doubleValue();
long r1 = Date.parse(bnk[q][0]);long r2 = Date.parse(csh[r][0]);
if ((!match)&&(cshbk == bankk)&&(matchedTransactions(bnk[q][1], csh[r][1]))) {returnee += csh[r][0] + ">" + csh[r][1] + ">" + csh[r][2] + "<";match = true;}
else  if (!match) {
if (matchInTransactions(bnk[q][1], csh[r][1])) {if ((!match)&&(r1 == r2)&&(cshbk == bankk)&&(matchParticulars(bnk[q][1], csh[r][1]))) {returnee += csh[r][0] + ">" + csh[r][1] + ">" + csh[r][2] + "<";match = true;}}
else if ((!match)&&(findBankMatch(cshbk, "Debit"))&&(matchUniqueCodes(bnk[q][3], csh[r][3]))) {returnee += csh[r][0] + ">" + csh[r][1] + ">" + csh[r][2] + "<";match = true;}
}
}
match = false;
}
return returnee;
}

int unmatchCashBookAndBank(String[][] csh, String[][] bnk) {
int returnee = 0;boolean match = false;
for (int q = 0; q <= bnk.length-1; q++) {
int returner = 0;
for (int r = 0; r <= csh.length-1; r++) {
double cshbk = new Double(csh[r][2]).doubleValue();
double bankk = new Double(bnk[q][2]).doubleValue();
long r1 = Date.parse(bnk[q][0]);long r2 = Date.parse(csh[r][0]);
if ((cshbk == bankk)&&(matchedTransactions(bnk[q][1], csh[r][1]))) {match = true;}
else {
if (matchInTransactions(bnk[q][1], csh[r][1])) {if ((r1 == r2)&&(cshbk == bankk)&&(matchParticulars(bnk[q][1], csh[r][1]))) {returner ++;match = true;}}
else if ((findBankMatch(cshbk, "Credit"))&&(matchUniqueCodes(bnk[q][3], csh[r][3]))) {returner ++;match = true;}
}
}
match = false;
if (returner > returnee) returnee = returner;
}
return returnee;
}

double unmatchCashBookAnd_Bank(String[][] csh, String[][] bnk) {
double returnee  = 0; boolean match = false; int match_number = -1;
for (int q = 0; q <= csh.length-1; q++) {
for (int r = 0; r <= bnk.length-1; r++) {
double cshbk = new Double(csh[q][2]).doubleValue();
double bankk = new Double(bnk[r][2]).doubleValue();
long r1 = Date.parse(bnk[r][0]);long r2 = Date.parse(csh[q][0]);
if ((!match)&&(cshbk == bankk)&&(matchedTransactions(bnk[r][1], csh[q][1]))) {match = true;match_number = q;}
else {
if (matchedTransactions(bnk[r][1], csh[q][1])) {if ((!match)&&(r1 == r2)&&(cshbk == bankk)&&(matchParticulars(bnk[r][1], csh[q][1]))) {match = true;match_number = q;}}
else if ((!match)&&(findBankMatch(cshbk, "Debit"))&&(matchUniqueCodes(bnk[r][3], csh[q][3]))) {match = true;match_number = q;}
}
}
if (!match) returnee += Double.valueOf(csh[q][2]).doubleValue();match = false; match_number = -1;
}
return returnee;
}

String unmatchCashBook_AndBank(String[][] csh, String[][] bnk) {
String returnee = ""; boolean match = false;
for (int q = 0; q <= bnk.length-1; q++) {
for (int r = 0; r <= csh.length-1; r++) {
double cshbk = new Double(csh[r][2]).doubleValue();
double bankk = new Double(bnk[q][2]).doubleValue();
long r1 = Date.parse(bnk[q][0]);long r2 = Date.parse(csh[r][0]);
if ((!match)&&(cshbk == bankk)&&(matchedTransactions(bnk[q][1], csh[r][1]))) {returnee += csh[r][0] + ">" + csh[r][1] + ">" + csh[r][2] + "<";match = true;}
else  if (!match) {
if (matchInTransactions(bnk[q][1], csh[r][1])) {if ((!match)&&(r1 == r2)&&(cshbk == bankk)&&(matchParticulars(bnk[q][1], csh[r][1]))) {returnee += csh[r][0] + ">" + csh[r][1] + ">" + csh[r][2] + "<";match = true;}}
else if ((!match)&&(findBankMatch(cshbk, "Debit"))&&(matchUniqueCodes(bnk[q][3], csh[r][3]))) {returnee += csh[r][0] + ">" + csh[r][1] + ">" + csh[r][2] + "<";match = true;}
}
}
match = false;
}
return returnee;
}

double getTotalUnmatchedLodgementsBank(int month,int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
double returnee = 0;
String banklodgements[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, true);
String cshbklodgements[][] = getCashBookTransactions(month, year, csh_acct_name, true);
return unmatchCashBookAndBank(cshbklodgements, banklodgements);
}

String getTotalUnmatchedLodgementsBanK(int month,int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
String returnee = "";
String banklodgements[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, true);
String cshbklodgements[][] = getCashBookTransactions(month, year, csh_acct_name, true);
boolean match = false;
//The rest is easy. Match array values
if (banklodgements.length > 0) {
for (int q = 0; q <= banklodgements.length-1; q++) {
if (cshbklodgements.length > 0) {
for (int r = 0; r <= cshbklodgements.length-1; r++) {
double cshbk = new Double(cshbklodgements[r][2]).doubleValue();
double bankk = new Double(banklodgements[q][2]).doubleValue();
long r1 = Date.parse(banklodgements[q][0]);long r2 = Date.parse(cshbklodgements[r][0]);
if ((!match)&&(cshbk == bankk)&&(matchedTransactions(banklodgements[q][1], cshbklodgements[r][1]))) {match = true;}
else {
if (matchInTransactions(banklodgements[q][1], cshbklodgements[r][1])) {if ((!match)&&(r1 == r2)&&(cshbk == bankk)&&(matchParticulars(banklodgements[q][1], cshbklodgements[r][1]))) {match = true;}}
else if ((!match)&&(findBankMatch(cshbk, "Credit"))&&(matchUniqueCodes(banklodgements[q][3], cshbklodgements[r][3]))) {match = true;}
}
}
}
if (!match) returnee += banklodgements[q][0] + ">" + banklodgements[q][1] + ">" + banklodgements[q][2] + "<";match = false;
}
    }
return returnee;}

double getTotalUnmatchedLodgementsCashBook(int month,int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
double returnee = 0;
String banklodgements[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, true);
String cshbklodgements[][] = getCashBookTransactions(month, year, csh_acct_name, true);
boolean match = false;
//The rest is easy. Match array values
if (cshbklodgements.length > 0) {
for (int q = 0; q <= cshbklodgements.length-1; q++) {
if (banklodgements.length > 0) {
for (int r = 0; r <= banklodgements.length-1; r++) {
double cshbk = new Double(cshbklodgements[q][2]).doubleValue();
double bankk = new Double(banklodgements[r][2]).doubleValue();
long r1 = Date.parse(banklodgements[r][0]);long r2 = Date.parse(cshbklodgements[q][0]);
if ((!match)&&(cshbk == bankk)&&(matchedTransactions(banklodgements[r][1], cshbklodgements[q][1]))) {match = true;}
else {
if (matchInTransactions(banklodgements[r][1], cshbklodgements[q][1])) {if ((!match)&&(r1 == r2)&&(cshbk == bankk)&&(matchParticulars(banklodgements[r][1], cshbklodgements[q][1]))) {match = true;}}
else if ((!match)&&(findBankMatch(cshbk, "Credit"))&&(matchUniqueCodes(banklodgements[r][3], cshbklodgements[q][3]))) {match = true;}
}
}
if (!match) returnee += Double.valueOf(cshbklodgements[q][2]).doubleValue();match = false;
}
}
}
return returnee;
}

String getTotalUnmatchedLodgementsCashBooK(int month,int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
String returnee = "";
int a = 0;
String banklodgements[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, true);
String cshbklodgements[][] = getCashBookTransactions(month, year, csh_acct_name, true);
boolean match = false;
//The rest is easy. Match array values
if (cshbklodgements.length > 0) {
for (int q = 0; q <= cshbklodgements.length-1; q++) {
if (banklodgements.length > 0) {
for (int r = 0; r <= banklodgements.length-1; r++) {
double cshbk = new Double(cshbklodgements[q][2]).doubleValue();
double bankk = new Double(banklodgements[r][2]).doubleValue();
long r1 = Date.parse(banklodgements[r][0]);long r2 = Date.parse(cshbklodgements[q][0]);
if ((!match)&&(cshbk == bankk)&&(matchedTransactions(banklodgements[r][1], cshbklodgements[q][1]))) {match = true;}
else {
if (matchInTransactions(banklodgements[r][1], cshbklodgements[q][1])) {if ((!match)&&(r1 == r2)&&(cshbk == bankk)&&(matchParticulars(banklodgements[r][1], cshbklodgements[q][1]))) {match = true;}}
else if ((!match)&&(findBankMatch(cshbk, "Credit"))&&(matchUniqueCodes(banklodgements[r][3], cshbklodgements[q][3]))) {match = true;}
}
}
if (!match) returnee += cshbklodgements[q][0] + ">" + cshbklodgements[q][1] + ">" + cshbklodgements[q][2] + "<";match = false;
}
}
}
return returnee;
}

double getTotalMatchedLodgements(int month, int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
double returnee = 0; boolean match = false;
String banklodgements[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, true);
String cshbklodgements[][] = getCashBookTransactions(month, year, csh_acct_name, true);
return matchCashBookAnd_Bank(cshbklodgements, banklodgements);
}

String getTotalUnmatchedWithdrawsCashBooK(int month,int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
String returnee = "";
String bankwithdraws[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, false);
String cshbkwithdraws[][] = getCashBookTransactions(month, year, csh_acct_name, false);
boolean match = false; int match_number = -1;
return unmatchCashBook_AndBank(cshbkwithdraws, bankwithdraws);
}

int getNoTotalMatchedLodgements(int month, int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
int returnee = 0; boolean match = false;
String banklodgements[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, true);
String cshbklodgements[][] = getCashBookTransactions(month, year, csh_acct_name, true);
return matchCashBookAndBank(cshbklodgements, banklodgements);
}

void getNCTotalMatchedLodgements(int month, int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
jComboBox19.removeAllItems();
int returnee = 0; boolean match = false;
String banklodgements[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, true);
String cshbklodgements[][] = getCashBookTransactions(month, year, csh_acct_name, true);
if (cshbklodgements.length > 0) {
for (int r = 0; r <= cshbklodgements.length-1; r++) {
int returner = 0;
if (banklodgements.length > 0) {
for (int q = 0; q <= banklodgements.length-1; q++) {
double cshbk = new Double(cshbklodgements[r][2]).doubleValue();
double bankk = new Double(banklodgements[q][2]).doubleValue();
long r1 = Date.parse(banklodgements[q][0]);long r2 = Date.parse(cshbklodgements[r][0]);
if ((cshbk == bankk)&&((matchedTransactions(banklodgements[q][1], cshbklodgements[r][1])))) {match = true;}
else {
if (matchInTransactions(banklodgements[q][1], cshbklodgements[r][1])) {if ((r1 == r2)&&(cshbk == bankk)&&(matchParticulars(banklodgements[q][1], cshbklodgements[r][1]))) {returner ++;match = true;}}
else if ((findBankMatch(cshbk, "Credit"))&&(matchUniqueCodes(banklodgements[q][3], cshbklodgements[r][3]))) {returner ++;match = true;}
}
if (returner > 1) {
boolean weed = false;
for (int j = 0; j <= jComboBox19.getItemCount()-1; j++) {
if ((String)jComboBox19.getItemAt(j) == cshbklodgements[r][1]) weed = true;
}
}
}
}
match = false;
if (returner > returnee) returnee = returner;
}
}
}

String getTotalMatchedLodgementS(int month, int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
String returnee = "";boolean match = false;
String banklodgements[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, true);
String cshbklodgements[][] = getCashBookTransactions(month, year, csh_acct_name, true);
return matchCashBook_AndBank(cshbklodgements, banklodgements);
}

double getTotalUnmatchedWithdrawsCashBook(int month,int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
double returnee = 0;
String bankwithdraws[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, false);
String cshbkwithdraws[][] = getCashBookTransactions(month, year, csh_acct_name, false);
return unmatchCashBookAndBank(cshbkwithdraws, bankwithdraws);
}

double getTotalUnmatchedWithdrawsBank(int month,int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
double returnee = 0;
String bankwithdraws[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, false);
String cshbkwithdraws[][] = getCashBookTransactions(month, year, csh_acct_name, false);
boolean match = false; int match_number = -1;
if (bankwithdraws.length > 0) {
for (int q = 0; q <= bankwithdraws.length-1; q++) {
if (cshbkwithdraws.length > 0) {
for (int r = 0; r <= cshbkwithdraws.length-1; r++) {
double cshbk = new Double(cshbkwithdraws[r][2]).doubleValue();
double bankk = new Double(bankwithdraws[q][2]).doubleValue();
long r1 = Date.parse(bankwithdraws[q][0]);long r2 = Date.parse(cshbkwithdraws[r][0]);
if ((!match)&&(cshbk == bankk)&&(matchedTransactions(bankwithdraws[q][1], cshbkwithdraws[r][1]))) {match = true;match_number = q;}
else {
if (matchInTransactions(bankwithdraws[q][1], cshbkwithdraws[r][1])) {if ((!match)&&(r1 == r2)&&(cshbk == bankk)&&(matchParticulars(bankwithdraws[q][1], cshbkwithdraws[r][1]))) {match = true;match_number = q;}}
else if ((!match)&&(findBankMatch(cshbk, "Debit"))&&(matchUniqueCodes(bankwithdraws[q][3], cshbkwithdraws[r][3]))) {match = true;match_number = q;}
}
}
}
if (!match) returnee += Double.valueOf(bankwithdraws[q][2]).doubleValue();match = false; match_number = -1;
}
}
return returnee;
}

String getTotalUnmatchedWithdrawsBanK(int month,int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
String returnee = "";
String bankwithdraws[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, false);
String cshbkwithdraws[][] = getCashBookTransactions(month, year, csh_acct_name, false);
boolean match = false; int match_number = -1;
//The rest is easy. Match array values
//Results not so pure. Details should be matched to give a purer result
if (bankwithdraws.length > 0) {
for (int q = 0; q <= bankwithdraws.length-1; q++) {
if (cshbkwithdraws.length > 0) {
for (int r = 0; r <= cshbkwithdraws.length-1; r++) {
double cshbk = new Double(cshbkwithdraws[r][2]).doubleValue();
double bankk = new Double(bankwithdraws[q][2]).doubleValue();
long r1 = Date.parse(bankwithdraws[q][0]);long r2 = Date.parse(cshbkwithdraws[r][0]);
if ((!match)&&(cshbk == bankk)&&(matchedTransactions(bankwithdraws[q][1], cshbkwithdraws[r][1]))) {match = true;match_number = q;}
else {
if (matchInTransactions(bankwithdraws[q][1], cshbkwithdraws[r][1])) {if ((!match)&&(r1 == r2)&&(cshbk == bankk)&&(matchParticulars(bankwithdraws[q][1], cshbkwithdraws[r][1]))) {match = true;match_number = q;}}
else if ((!match)&&(findBankMatch(cshbk, "Debit"))&&(matchUniqueCodes(bankwithdraws[q][3], cshbkwithdraws[r][3]))) {match = true;match_number = q;}
}
}
}
if (!match) returnee += bankwithdraws[q][0] + ">" + bankwithdraws[q][1] + ">" + bankwithdraws[q][2] + "<";match = false; match_number = -1;
}
}
return returnee;
}

double getTotalMatchedWithdraws(int month, int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
//Work to be done here before demo. Work here is work above. Kid's stuff
double returnee = 0; boolean match = false;
String bankwithdraws[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, false);
String cshbkwithdraws[][] = getCashBookTransactions(month, year, csh_acct_name, false);
return matchCashBookAnd_Bank(cshbkwithdraws, bankwithdraws);
}


int getNoTotalMatchedWithdraws(int month, int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
//Work to be done here before demo. Work here is work above. Kid's stuff
int returnee = 0; boolean match = false;
String bankwithdraws[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, false);
String cshbkwithdraws[][] = getCashBookTransactions(month, year, csh_acct_name, false);
return matchCashBookAndBank(cshbkwithdraws, bankwithdraws);
}

void getNCTotalMatchedWithdraws(int month, int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
jComboBox19.removeAllItems();
//jComboBox20.removeAllItems();
int returnee = 0; boolean match = false;
String bankwithdraws[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, false);
String cshbkwithdraws[][] = getCashBookTransactions(month, year, csh_acct_name, false);
for (int r = 0; r <= cshbkwithdraws.length-1; r++) {
int returner = 0;
if (bankwithdraws.length > 0) {
for (int q = 0; q <= bankwithdraws.length-1; q++) {
double cshbk = new Double(cshbkwithdraws[r][2]).doubleValue();
double bankk = new Double(bankwithdraws[q][2]).doubleValue();
long r1 = Date.parse(bankwithdraws[q][0]);long r2 = Date.parse(cshbkwithdraws[r][0]);
if ((!match)&&(cshbk == bankk)&&(matchedTransactions(bankwithdraws[q][1], cshbkwithdraws[r][1]))) {match = true;}
else {
if (matchInTransactions(bankwithdraws[q][1], cshbkwithdraws[r][1])) {if ((!match)&&(r1 == r2)&&(cshbk == bankk)&&(matchParticulars(bankwithdraws[q][1], cshbkwithdraws[r][1]))) {returner ++;match = true;}}
else if ((!match)&&(findBankMatch(cshbk, "Debit"))&&(matchUniqueCodes(bankwithdraws[q][3], cshbkwithdraws[r][3]))) {returner ++;match = true;}
}
if (returner > 1) {
boolean weed = false;
for (int j = 0; j <= jComboBox19.getItemCount()-1; j++) {
if ((String)jComboBox19.getItemAt(j) == cshbkwithdraws[r][1]) weed = true;
}
if (!weed) jComboBox19.addItem(cshbkwithdraws[r][1]);
}
}
}
match = false;
}
}

String getTotalMatchedWithdrawS(int month, int year, String bank_name, String bnk_acct_name, String csh_acct_name) {
String returnee = ""; boolean match = false;
String bankwithdraws[][] = getBankTransactions(month, year, bank_name, bnk_acct_name, false);
String cshbkwithdraws[][] = getCashBookTransactions(month, year, csh_acct_name, false);
return matchCashBook_AndBank(cshbkwithdraws, bankwithdraws);
}

int getNoLodgementsBank(int month, int year, String bank_name, String account_name) {
int returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE month(Date) = ? and year(Date) = ? and Bank = ? and AccountName = ? and Type = 'Credit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, bank_name);
preparedStatement.setString(4, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
String bbnk = rs.getString("Bank");
if (bbnk.equals(bank_name)) returnee ++;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
//System.out.println("BankLodgements=" + returnee);
return returnee;
}

int getNoWithdrawsBank(int month, int year, String bank_name, String account_name) {
int returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE month(Date) = ? and  year(Date) = ? and Bank = ? and AccountName = ? and Type = 'Debit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, bank_name);
preparedStatement.setString(4, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
returnee++;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
//System.out.println("BankWithdraws=" + returnee);
return returnee;
}

int getNoLodgementsCashBook(int month, int year, String account_name) {
int returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM CashBook WHERE month(Date) = ? and year(Date) = ? and AccountName = ? and Type = 'Credit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
returnee++;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
//System.out.println("LodgementsCashBook=" + returnee);
return returnee;
}

int getNoWithdrawsCashBook(int month, int year, String account_name) {
int returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM CashBook WHERE month(Date) = ? and year(Date) = ? and AccountName = ? and Type = 'Debit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3,account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
returnee++;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
//System.out.println("WithdrawsCashbook=" + returnee);
return returnee;
}

double getTotalBankCharges(int month, int year, String bank_name, String account_name) {
double returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE month(Date) = ? and year(Date) = ? and Bank = ? and AccountName = ? order by Date");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, bank_name);
preparedStatement.setString(4, account_name);
rs = preparedStatement.executeQuery();
while (rs.next()) {
double temp = rs.getDouble("Value");
if (temp < 1000) returnee += temp;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
return returnee;
}

public boolean matchedTransactions(String a, String b) {
boolean sid = false;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
preparedStatement = conn.prepareStatement("SELECT * FROM MatchTransact WHERE CshBkParticulars = ? and BnkParticulars = ?");
preparedStatement.setString(1, a);
preparedStatement.setString(2, b);
rs = preparedStatement.executeQuery();
while (rs.next()) {
sid = true;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
preparedStatement.close();
conn.close();
}
catch (Exception e) {}
}
if (sid) return sid;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
preparedStatement = conn.prepareStatement("SELECT * FROM MatchTransact WHERE BnkParticulars = ? and CshBkParticulars = ?");
preparedStatement.setString(1, a);
preparedStatement.setString(2, b);
rs = preparedStatement.executeQuery();
while (rs.next()) {
sid = true;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
preparedStatement.close();
conn.close();
}
catch (Exception e) {}
}
System.out.print(sid);
return sid;
}

public boolean matchInTransactions(String a, String b) {
boolean sid = true;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
preparedStatement = conn.prepareStatement("SELECT * FROM MatchTransact WHERE CshBkParticulars = ? or BnkParticulars = ?");
preparedStatement.setString(1, a);
preparedStatement.setString(2, b);
rs = preparedStatement.executeQuery();
while (rs.next()) {
sid = false;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
preparedStatement.close();
conn.close();
}
catch (Exception e) {}
}
if (sid) return sid;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
preparedStatement = conn.prepareStatement("SELECT * FROM MatchTransact WHERE BnkParticulars = ? or CshBkParticulars = ?");
preparedStatement.setString(1, a);
preparedStatement.setString(2, b);
rs = preparedStatement.executeQuery();
while (rs.next()) {
sid = false;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
preparedStatement.close();
conn.close();
}
catch (Exception e) {}
}
System.out.print(sid);
return sid;
}

void test(int month, int year, String bank, String account) {
double returnee = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE month(Date) = ? and year(Date) = ? and Bank = ? and AccountName = ? and Type = 'Debit'");
preparedStatement.setInt(1, month);
preparedStatement.setInt(2, year);
preparedStatement.setString(3, bank);
preparedStatement.setString(4, account);
rs = preparedStatement.executeQuery();
while (rs.next()) {
String bbnk = rs.getString("Bank");
double temp = rs.getDouble("Value");
System.out.println(bbnk + ":" + temp);
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
}

public boolean matchUniqueCodes(String a, String b) {
if ((a != "")&&(b != "")) {
try {
if ((a.contains(b))||(b.contains(a))) return true;
else return false;
}
catch (Exception e) {
return false;
}
}
else return false;
}

public boolean findBankMatch(double cshbk, String ni) {
boolean ril = false;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
if (ni == "Debit") preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE Value = ? and Type = 'Debit'");
else preparedStatement = conn.prepareStatement("SELECT * FROM BankStatement WHERE Value = ? and Type = 'Credit'");
preparedStatement.setString(1, String.valueOf(cshbk));
rs = preparedStatement.executeQuery();
while (rs.next()) {
ril = true;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
preparedStatement.close();
}
catch (Exception e) {}
}
return ril;
}

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
int month = jComboBox6.getSelectedIndex()+1;
Calendar r = Calendar.getInstance();
int year = r.get(Calendar.YEAR);
try {year = new Integer(jTextField9.getText()).intValue();} catch (Exception e) {}
//System.out.println("Month: " + month + " Year:" + year);
jTable2.setValueAt("end of " + getMonth(month), 1, 1);
jTable2.setValueAt(getTotalMatchedLodgements(month, year, bank_namee, bank_account_name, cashbook_account), 3, 1);
if (getTotalLodgementsCashBook(month, year, cashbook_account)-getTotalLodgementsBank(month, year, bank_namee,cashbook_account) > 0) jTable2.setValueAt(getTotalLodgementsCashBook(month, year, cashbook_account)-getTotalLodgementsBank(month, year, bank_namee, bank_account_name), 4, 1);
if (getTotalLodgementsBank(month, year, bank_namee, bank_account_name)-getTotalLodgementsCashBook(month, year, cashbook_account) > 0) jTable2.setValueAt(getTotalLodgementsBank(month, year, bank_namee, bank_account_name)-getTotalLodgementsCashBook(month, year, cashbook_account), 5, 1);
//jTable2.setValueAt("CASH BOOK ERRORS", 6, 1);
//jTable2.setValueAt("ADD:Error of Undercasting",7, 1);
//jTable2.setValueAt("LESS: Error of Overcasting", 8, 1);
jTable2.setValueAt(getTotalLodgementsBank(month, year, bank_namee, bank_account_name), 9, 1);
//jTable2.setValueAt("LESS WITHDRAWAL", 10, 1);
jTable2.setValueAt(getTotalMatchedWithdraws(month, year, bank_namee, bank_account_name, cashbook_account), 8, 1);
if (getTotalWithdrawsCashBook(month, year, cashbook_account)-getTotalWithdrawsBank(month, year, bank_namee, bank_account_name) > 0) jTable2.setValueAt(getTotalWithdrawsCashBook(month, year, cashbook_account)-getTotalWithdrawsBank(month, year, bank_namee, bank_account_name), 9, 1);
if (getTotalWithdrawsBank(month, year, bank_namee, bank_account_name)-getTotalWithdrawsCashBook(month, year, cashbook_account) > 0) jTable2.setValueAt(getTotalWithdrawsBank(month, year, bank_namee, bank_account_name)-getTotalWithdrawsCashBook(month, year, cashbook_account), 10, 1);
jTable2.setValueAt(getTotalBankCharges(month, year, bank_namee, bank_account_name), 11, 1);
//jTable2.setValueAt("CASH BOOK ERRORS", 12, 1);
//jTable2.setValueAt("ADD: ERROR OF UNDERCAST", 13, 1);
//jTable2.setValueAt("LESS: ERROR OF OVERCASTING", 14, 1);
//jTable2.setValueAt("SUB-TOTAL", 15, 1);
//jTable2.setValueAt("Balance as per adjusted Cash Book as at", 16, 1);
//jTable2.setValueAt("MAIN BANK RECONCILIATION STATEMENT AS AT ", 17, 1);
//jTable2.setValueAt("Balance as per adjusted Cash Book as at", 18, 1);
//jTable2.setValueAt("ADD UNCLEARED MANDATE", 19, 1);
jTable2.setValueAt(getMonth(month), 20, 1);
jTable2.setValueAt("end of " + getMonth(month), 21, 1);
//jTable2.setValueAt("Less Cleared Mandate", 22, 1);
jTable2.setValueAt("end of " + getMonth(month), 23, 1);
//jTable2.setValueAt("LESS UNCREDITED CHEQUES", 24, 1);
jTable2.setValueAt(getMonth(month), 25, 1);
jTable2.setValueAt("end of " + getMonth(month), 26, 1);
//jTable2.setValueAt("Less credited cheques", 27, 1);
jTable2.setValueAt("end of " + getMonth(month), 28, 1);
//jTable2.setValueAt("BANK ERRORS", 29, 1);
//jTable2.setValueAt("ADD ERROR OF OVERCAST (lodgement)", 30, 1);
//jTable2.setValueAt("LESS ERROR OF UNDERCAST (lodgement)", 31, 1);
//jTable2.setValueAt("LESS ERROR OF OVERCAST (payment)", 32, 1);
//jTable2.setValueAt("ADD ERROR OF UNDERCAST (payment)", 33, 1);
//jTable2.setValueAt("Sub-Total of errors", 34, 1);
//jTable2.setValueAt("BANK ERRORS", 35, 1);
//jTable2.setValueAt("ADD ERROR OF UNDER CASTING (payment)", 36, 1);
jTable2.setValueAt(getBalanceAtMonthEndBank(month, year,bank_namee, bank_account_name), 37, 1);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
int month = jComboBox7.getSelectedIndex()+1;
Calendar r = Calendar.getInstance();
int year = r.get(Calendar.YEAR);
jTable6.setValueAt(getTotalLodgementsCashBook(month, year, cashbook_account), 1, 1);
jTable6.setValueAt(getTotalLodgementsBank(month, year, bank_namee, bank_account_name), 2, 1);
double deficit1 = Math.abs(getTotalLodgementsCashBook(month, year, cashbook_account) - getTotalLodgementsBank(month, year, bank_namee, bank_account_name));
jTable6.setValueAt(deficit1, 3, 1);
jTable6.setValueAt(getTotalWithdrawsCashBook(month, year, cashbook_account), 5, 1);
jTable6.setValueAt(getTotalWithdrawsBank(month, year, bank_namee, bank_account_name), 6, 1);
double deficit2 = Math.abs(getTotalWithdrawsCashBook(month, year, cashbook_account) - getTotalWithdrawsBank(month, year, bank_namee, bank_account_name));
jTable6.setValueAt(deficit2, 7, 1);
jTable6.setValueAt(getBalanceAtMonthEndCashBook(month, year, cashbook_account), 9, 1);
double newbal1 = getBalanceAtMonthEndCashBook(month, year, cashbook_account) + getTotalLodgementsCashBook(month, year, cashbook_account) - getTotalWithdrawsCashBook(month, year, cashbook_account);
jTable6.setValueAt(newbal1, 10, 1);
jTable6.setValueAt(getBalanceAtMonthEndBank(month, year, bank_namee, bank_account_name), 12, 1);
double newbal2 = getBalanceAtMonthEndBank(month, year, bank_namee, bank_account_name) + getTotalLodgementsBank(month, year, bank_namee, bank_account_name) - getTotalWithdrawsBank(month, year, bank_namee, bank_account_name);
jTable6.setValueAt(newbal2, 13, 1);
bank_namee = null; bank_account_name = null; cashbook_account= null;
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jInternalFrame7InternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame7InternalFrameActivated
//Balance errors
        //First bank
double val1 = 0; double val2 = 0;
int a = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
rs = s.executeQuery("SELECT * FROM BankStatement order by Date");
while (rs.next()) {
double val12 = rs.getDouble("Balance"); String type1 = rs.getString("Type");val1 = rs.getDouble("Value");
if ((((type1.equals("Debit"))&&(val1 != 0)&&(val2 != 0))&&(val12-val1 != val2))||(((type1.equals("Credit"))&&(val1 != 0)&&(val2 != 0))&&(val2+val1 != val2))) {
jTable3.setValueAt("Problem in bank statement on " + rs.getString("Date"), a, 0);
jTable3.setValueAt(val12- val1, a, 2);
jTable3.setValueAt(val2, a, 1);
a++;
}
val2 = val12;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
//Next cash book
val1 = 0;val2 = 0;
a = 0;
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
rs = s.executeQuery("SELECT * FROM CashBook order by Date");
while (rs.next()) {
double val12 = rs.getDouble("Balance"); String type1 = rs.getString("Type");val1 = rs.getDouble("Value");
if ((((type1.equals("Debit"))&&(val1 != 0)&&(val2 != 0))&&(val12-val1 != val2))||(((type1.equals("Credit"))&&(val1 != 0)&&(val2 != 0))&&(val2+val1 != val2))) {
jTable3.setValueAt("Problem in cash book on " + rs.getString("Date"), a, 0);
jTable3.setValueAt(val12- val1, a, 2);
jTable3.setValueAt(val2, a, 1);
a++;
}
val2 = val12;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
    }//GEN-LAST:event_jInternalFrame7InternalFrameActivated

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
jInternalFrame16.setVisible(true);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
jInternalFrame12.setVisible(true);
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
jInternalFrame13.setVisible(true);
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
  jInternalFrame12.setVisible(false);
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
jInternalFrame11.setVisible(false);
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
jInternalFrame13.setVisible(false);
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jTable9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable9MouseClicked
int i = jTable9.getSelectedRow();
jLabel26.setText((String)jTable9.getValueAt(i, 0));
jDialog2.setVisible(true);
jDialog2.setLocation(evt.getX(), evt.getY());
jLabel27.setText(i + ":" + "jTable9");
    }//GEN-LAST:event_jTable9MouseClicked

 public void getTotalAdjustedCashBook() {
 double one = 0, two = 0, three = 0, four = 0, five = 0, six = 0, seven = 0;
 try {one = Double.valueOf(((String)jTable7.getValueAt(1, 1)).replaceAll(",", "")).doubleValue();} catch (Exception e) {}
 try {two = Double.valueOf(((String)jTable7.getValueAt(3, 1)).replaceAll(",", "")).doubleValue();} catch (Exception e) {}
 try {three = Double.valueOf(((String)jTable7.getValueAt(4, 1)).replaceAll(",", "")).doubleValue();} catch (Exception e) {}
 try {four = Double.valueOf(((String)jTable7.getValueAt(5, 1)).replaceAll(",", "")).doubleValue();} catch (Exception e) {}
 try {five = Double.valueOf(((String)jTable7.getValueAt(6, 1)).replaceAll(",", "")).doubleValue();} catch (Exception e) {}
 try {six = Double.valueOf(((String)jTable7.getValueAt(7, 1)).replaceAll(",", "")).doubleValue();} catch (Exception e) {}
 seven = one + two - three + four - five - six;
 if (Math.abs(seven) >= 1000) jTable7.setValueAt(decimal2.format(seven), 8, 1);
 else jTable7.setValueAt(decimal.format(seven), 8, 1);
int month = jComboBox8.getSelectedIndex()+1;
Calendar r = Calendar.getInstance();
int year = r.get(Calendar.YEAR) - jComboBox11.getSelectedIndex();
 double unclcheques = Math.abs(getTotalChequesCashBookDebit(month, year, cashbook_account) - getTotalChequesBankDebit(month, year, bank_namee, bank_account_name));
unclcheques = Math.abs(unclcheques);
double uncrcheques = Math.abs(getTotalChequesBankCredit(month, year, bank_namee, bank_account_name) - getTotalChequesCashBookCredit(month, year, cashbook_account));
uncrcheques = Math.abs(uncrcheques);
double eight = 0;double nine = 0; double ten = 0;
try {eight = Double.valueOf(((String)jTable7.getValueAt(8, 1)).replaceAll(",", "")).doubleValue();} catch (Exception e) {}
try {nine = Double.valueOf(((String)jTable7.getValueAt(9, 1)).replaceAll(",", "")).doubleValue();} catch (Exception e) {}
try {ten = Double.valueOf(((String)jTable7.getValueAt(10, 1)).replaceAll(",", "")).doubleValue();} catch (Exception e) {}
double adjbal = eight - ten + nine;
//getBalanceAtMonthEndBank(month, year, bank_namee, bank_account_name);
if (Math.abs(adjbal) >= 1000) jTable7.setValueAt(decimal2.format(adjbal), 12, 1);
else jTable7.setValueAt(decimal.format(adjbal), 12, 1);
try {
double monthendbal = Double.valueOf(((String)jTable7.getValueAt(8, 1)).replaceAll(",", "")).doubleValue() - uncrcheques + unclcheques;
if (Math.abs(monthendbal) >= 1000)
jTable7.setValueAt(decimal2.format(monthendbal), 12, 1);
else jTable7.setValueAt(decimal.format(monthendbal), 12, 1);
} catch (Exception e) {}
try {
double value1 = Double.valueOf(((String)jTable7.getValueAt(12, 1)).replaceAll(",", "")).doubleValue();
double value2 = Double.valueOf(((String)jTable7.getValueAt(13, 1)).replaceAll(",", "")).doubleValue();
double difference = Math.abs(value1 - value2);
if (Math.abs(difference) >= 1000) jTable7.setValueAt(decimal2.format(difference), 14, 1);
else jTable7.setValueAt(decimal.format(difference), 14, 1);
} catch (Exception e) {}
 }

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
 String[] h = jLabel27.getText().split(":");
 if (h[1].equals("jTable9")) jTable9.setValueAt(jTextField10.getText(), new Integer(h[0]).intValue(), 1);
 if (h[1].equals("jTable8")) jTable8.setValueAt(jTextField10.getText(), new Integer(h[0]).intValue(), 1);
 double valo = 0;
 try {valo = Double.valueOf(jTextField10.getText()).doubleValue();} catch (Exception e) {}
 if (valo >= 1000) {if (h[1].equals("jTable7")) {jTable7.setValueAt(decimal2.format(valo), new Integer(h[0]).intValue(), 1);getTotalAdjustedCashBook();}}
 else {if (h[1].equals("jTable7")) {jTable7.setValueAt(decimal.format(valo), new Integer(h[0]).intValue(), 1);getTotalAdjustedCashBook();}}
 jDialog2.setVisible(false);jLabel27.setText("");jTextField10.setText("");

    }//GEN-LAST:event_jButton23ActionPerformed

    private void jTable7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable7MouseClicked
int i = jTable7.getSelectedRow();
for (int p = 0; p < jTable10.getRowCount(); p++) {
for(int q = 0; q < jTable10.getColumnCount(); q++) {
jTable10.setValueAt("", p, q);
}
}
if ((i == 3)||(i == 4)||(i == 9)||(i == 10)) {
if (i == 3) {
String totlodgs = getTotalMatchedLodgementS(main_month, main_year, bank_namee, bank_account_name, cashbook_account);
if (totlodgs != "") {
//System.out.println(totlodgs);
String g[] = totlodgs.split("<");
for (int b = 0; b < g.length; b++) {
String h[] = g[b].split(">");
for (int j = 0; j < h.length; j++) {
try {
double totallodge = Double.valueOf(h[j]);
if (totallodge >= 1000) jTable10.setValueAt(decimal2.format(totallodge), b, j);
else jTable10.setValueAt(decimal.format(totallodge), b, j);
}
catch (Exception e) {jTable10.setValueAt(h[j], b, j);}
}
jTable10.setValueAt("Credit", b, 3);
}
jDialog3.setVisible(true);
jDialog3.setLocation(evt.getX(), evt.getY());
}
}
if (i == 4) {
String totlodgs = getTotalMatchedWithdrawS(main_month, main_year, bank_namee, bank_account_name, cashbook_account);
if (totlodgs != "") {
//System.out.println(totlodgs);
String g[] = totlodgs.split("<");
for (int b = 0; b < g.length; b++) {
String h[] = g[b].split(">");
for (int j = 0; j < h.length; j++) {
try {
double totallodge = Double.valueOf(h[j]);
if (totallodge >= 1000) jTable10.setValueAt(decimal2.format(totallodge), b, j);
else jTable10.setValueAt(decimal.format(totallodge), b, j);
}
catch (Exception e) {jTable10.setValueAt(h[j], b, j);}
}
jTable10.setValueAt("Debit", b, 3);
}
jDialog3.setVisible(true);
jDialog3.setLocation(evt.getX(), evt.getY());
}
}
if (i == 9) {
String totlodgs = getTotalUnmatchedWithdrawsCashBooK(main_month, main_year, bank_namee, bank_account_name, cashbook_account);
if (totlodgs != "") {
String g[] = totlodgs.split("<");
for (int b = 0; b < g.length; b++) {
String h[] = g[b].split(">");
for (int j = 0; j < h.length; j++) {
try {
double totallodge = Double.valueOf(h[j]);
if (totallodge >= 1000) jTable10.setValueAt(decimal2.format(totallodge), b, j);
else jTable10.setValueAt(decimal.format(totallodge), b, j);
}
catch (Exception e) {jTable10.setValueAt(h[j], b, j);}
}
jTable10.setValueAt("Debit", b, 3);
}
jDialog3.setVisible(true);
jDialog3.setLocation(evt.getX(), evt.getY());
}
}
if (i == 10) {
String totlodgs = getTotalUnmatchedWithdrawsBanK(main_month, main_year, bank_namee, bank_account_name, cashbook_account);
if (totlodgs != "") {
String g[] = totlodgs.split("<");
for (int b = 0; b < g.length; b++) {
String h[] = g[b].split(">");
for (int j = 0; j < h.length; j++) {
try {
double totallodge = Double.valueOf(h[j]);
if (totallodge >= 1000) jTable10.setValueAt(decimal2.format(totallodge), b, j);
else jTable10.setValueAt(decimal.format(totallodge), b, j);
}
catch (Exception e) {jTable10.setValueAt(h[j], b, j);}
}
jTable10.setValueAt("Debit", b, 3);
}
jDialog3.setVisible(true);
jDialog3.setLocation(evt.getX(), evt.getY());
}
String totlodgs2 = getTotalUnmatchedLodgementsBanK(main_month, main_year, bank_namee, bank_account_name, cashbook_account);
String g[] = totlodgs2.split("<");
}
}
else if ((i == 1)||(i == 13)) {
jLabel26.setText((String)jTable7.getValueAt(i, 0));
jDialog2.setVisible(true);
jDialog2.setLocation(evt.getX(), evt.getY());
jLabel27.setText(i + ":" + "jTable7");
        }
    }//GEN-LAST:event_jTable7MouseClicked

public int getPositionInArray(String query) {
String[] caption = {"BANK RECONCILIATION STATEMENT AS AT END OF THE PERIOD","PARTICULARS","BALANCE AS PER CASH BOOK AS AT END OF THE PERIOD",
"AWAITING JOURNALS","EXCEPTIONS /SUM OF JOURNALS","CASHBOOK ERRORS","BALANCE AS PER ADJUSTED CASH BOOK AS AT END OF THE PERIOD",
"ADD UNCLEARED MANDATES/UNPRESENTED CHEQUES","LESS UNCREDITED CHEQUES","BANK ERRORS","RECONCILED BALANCE","BALANCE AS PER BANK STATEMENT AS AT END OF THE PERIOD",
"DIFFERENCE","PREPARED BY:","SIGNATURE/DATE:"};
for (int i = 0; i <= caption.length-1; i++) {
if ((query != null)&&(query.equals(caption[i]))) return i;
}
return -1;
}

public String explain(int interest) {
if (interest == -1) {
return "Point not recognised";
}
if (interest == 0) {
return "Not a point of interest";
}
if (interest == 1) {
return "Not a point of interest";
//return "<html><head><title>Tooltip</title></head><body><h3>SMS alert charges on 11 6 2013 with value 12.0</h3></body></html>";
}
if (interest == 2) {
return "This is the cash book closing balance (unadjusted).";
}
if (interest == 3) {
String rest = produceItemsNotInBankStatement();
if (rest.length() > 1) return rest;
else return "Transactions that have been refected in the cash book but not in the bank statement";
}
if (interest == 4) {
String rest = produceItemsNotInCashBook();
if (rest.length() > 1) return rest;
else return "A list of all items (both lodgments and withdrawals) found in the bank statement but not yet posted in the cash book.";
}
if (interest == 5) {
return "Breakdown of errors originating from the cashbook";
}
if (interest == 6) {
return "Balance after cash book has been adjusted based on input from above";
}
if (interest == 7) {
return "Sum of amount of all unpresented cheques";
}
if (interest == 8) {
return "Deduct the amount on uncredited cheques";
}
if (interest == 9) {
return "A more elaborate breakdown of bank errors";
}
if (interest == 10) {
return "Balance obtained after reconciliation process";
}
if (interest == 11) {
return "Bank Statement balance at the end of the period";
}
if (interest == 12) {
return "Difference between bank balance and reconciled balance";
}
if (interest == 13) {
return "Person who prepared the report";
}
if (interest == 14) {
return "Signature and date";
}
return null;
}

String produceItemsNotInCashBook() {
int month = jComboBox8.getSelectedIndex()+1;
Calendar r = Calendar.getInstance();
int year = r.get(Calendar.YEAR) - jComboBox11.getSelectedIndex();
String unmatchlodgs = getTotalUnmatchedLodgementsBanK(month, year, bank_namee, bank_account_name, cashbook_account);
String unmatchwits = getTotalUnmatchedWithdrawsBanK(month, year, bank_namee, bank_account_name, cashbook_account);
//System.out.println(unmatchlodgs + ":" + unmatchwits);
String k = "";
if ((unmatchlodgs != "")||(unmatchlodgs != "")) {
k = "<html><head><title>Tooltip</title></head><body>";
k = k + "<table border=0><tr><th>Date</th>";
k = k + "<th>Particulars</th>";
k = k + "<th>Value</th></tr>";
if (unmatchlodgs != "") {
String g[] = unmatchlodgs.split("<");
for (int i = 0; i < g.length; i++) {
k = k + "<tr>";
String h[] = g[i].split(">");
for (int j = 0; j < h.length; j++) {
k = k + "<td>" + h[j] +  "</td";
}
k += "</tr>";
//k = k + "</p></h3>";
}
}
if (unmatchwits != "") {
String a[] = unmatchwits.split("<");
for (int i = 0; i < a.length; i++) {
//k = k + "<p>";
String h[] = a[i].split(">");
for (int j = 0; j < h.length; j++) {
k = k + "<td>"+ h[j] + "</td>";
}
k += "</tr>";
//k = k + "</p>";
}
}
k = k + "</body></html>";
System.out.println(k);
}
return k;
}

String produceItemsNotInBankStatement() {
int month = jComboBox8.getSelectedIndex()+1;
Calendar r = Calendar.getInstance();
int year = r.get(Calendar.YEAR) - jComboBox11.getSelectedIndex();
String unmatchlodgs = getTotalUnmatchedLodgementsCashBooK(month, year, bank_namee, bank_account_name, cashbook_account);
String unmatchwits = getTotalUnmatchedWithdrawsCashBooK(month, year, bank_namee, bank_account_name, cashbook_account);
String k = "";
if ((unmatchlodgs != "")||(unmatchlodgs != "")) {
k = "<html><head><title>Tooltip</title></head><body>";
k = k + "<table border=0><tr><th>Date</th>";
k = k + "<th>Particulars</th>";
k = k + "<th>Value</th></tr>";
if (unmatchlodgs != "") {
String g[] = unmatchlodgs.split("<");
for (int i = 0; i < g.length; i++) {
k = k + "<tr>";
String h[] = g[i].split(">");
for (int j = 0; j < h.length; j++) {
k = k + "<td>" + h[j] +  "</td";
}
k += "</tr>";
//k = k + "</p></h3>";
}
}
if (unmatchwits != "") {
String a[] = unmatchwits.split("<");
for (int i = 0; i < a.length; i++) {
//k = k + "<p>";
String h[] = a[i].split(">");
for (int j = 0; j < h.length; j++) {
k = k + "<td>"+ h[j] + "</td>";
}
k += "</tr>";
//k = k + "</p>";
}
}
k = k + "</body></html>";
System.out.println(k);
}
return k;
}

    private void jTable8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable8MouseClicked
int i = jTable8.getSelectedRow();
jLabel26.setText((String)jTable8.getValueAt(i, 0));
jDialog2.setVisible(true);
jDialog2.setLocation(evt.getX(), evt.getY());
jLabel27.setText(i + ":" + "jTable8");
    }//GEN-LAST:event_jTable8MouseClicked

    private void jTable7MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable7MouseMoved
Point p = new Point();p.x = evt.getX(); p.y = evt.getY();
try {
int posn = getPositionInArray((String)jTable7.getValueAt(jTable7.rowAtPoint(p),jTable7.columnAtPoint(p)));
if ((posn != 1)||(posn != 3)||(posn != 4)) jTable7.setToolTipText(returnStringAsHTML(explain(posn)));
else jTable7.setToolTipText(explain(posn));
} catch (Exception e) {}
    }//GEN-LAST:event_jTable7MouseMoved

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
int month = jComboBox8.getSelectedIndex()+1;
main_month = month;
Calendar r = Calendar.getInstance();
int year = r.get(Calendar.YEAR) - jComboBox11.getSelectedIndex();
main_year = year;
if ((getNoTotalMatchedLodgements(month, year, bank_namee, bank_account_name, cashbook_account) > 1)||(getNoTotalMatchedWithdraws(month, year, bank_namee, bank_account_name, cashbook_account) > 1)) {
jDialog4.setLocationRelativeTo(this);
jDialog4.setSize(430, 157);
jDialog4.setVisible(true);
}
else {
calculateAllValues();
}
    }//GEN-LAST:event_jButton11ActionPerformed

void calculateAllValues() {
int month = jComboBox8.getSelectedIndex()+1;
main_month = month;
Calendar r = Calendar.getInstance();
int year = r.get(Calendar.YEAR) - jComboBox11.getSelectedIndex();
main_year = year;
double totallodge = getTotalMatchedLodgements(month, year, bank_namee, bank_account_name, cashbook_account);
if (totallodge >= 1000) jTable7.setValueAt(decimal2.format(totallodge), 3, 1);
else jTable7.setValueAt(decimal.format(totallodge), 3, 1);
double cshbkbal = getBalanceAtMonthEndCashBook(month, year, cashbook_account);cshbkbal = Math.abs(cshbkbal);
if (cshbkbal >= 1000) jTable7.setValueAt(decimal2.format(cshbkbal), 1, 1);
else jTable7.setValueAt(decimal.format(cshbkbal), 1, 1);
double notyetposted = Math.abs(getTotalUnmatchedWithdrawsCashBook(month, year, bank_namee, bank_account_name, cashbook_account)) - Math.abs(getTotalUnmatchedLodgementsCashBook(month, year, bank_namee, bank_account_name, cashbook_account));
notyetposted = Math.abs(notyetposted);
double totalwithd = getTotalMatchedWithdraws(month, year, bank_namee, bank_account_name, cashbook_account);
if (totalwithd >= 1000) jTable7.setValueAt(decimal2.format(totalwithd), 4, 1);
else jTable7.setValueAt(decimal.format(totalwithd), 4, 1);
double postednotyetcshbk = Math.abs(getTotalUnmatchedWithdrawsBank(month, year, bank_namee, bank_account_name, cashbook_account)) - Math.abs(getTotalUnmatchedLodgementsBank(month, year, bank_namee, bank_account_name, cashbook_account));
postednotyetcshbk = Math.abs(postednotyetcshbk);
if (notyetposted >= 1000) jTable7.setValueAt(decimal2.format(notyetposted), 9, 1);
else jTable7.setValueAt(decimal.format(notyetposted), 9, 1);
if (postednotyetcshbk >= 1000) jTable7.setValueAt(decimal2.format(postednotyetcshbk), 6, 1);
else jTable7.setValueAt(decimal.format(postednotyetcshbk), 6, 1);
double unclcheques = Math.abs(getTotalChequesCashBookDebit(month, year, cashbook_account) - getTotalChequesBankDebit(month, year, bank_namee, bank_account_name));
unclcheques = Math.abs(unclcheques);
double uncrcheques = Math.abs(getTotalChequesBankCredit(month, year, bank_namee, bank_account_name) - getTotalChequesCashBookCredit(month, year, cashbook_account));
uncrcheques = Math.abs(uncrcheques);
if (uncrcheques >= 1000) jTable7.setValueAt(decimal2.format(uncrcheques), 5, 1);
else jTable7.setValueAt(decimal.format(uncrcheques), 5, 1);
double bnkbal = getBalanceAtMonthEndBank(month, year, bank_namee, bank_account_name);bnkbal = Math.abs(bnkbal);
if (bnkbal >= 1000) jTable7.setValueAt(decimal2.format(bnkbal), 13, 1);
else jTable7.setValueAt(decimal.format(bnkbal), 13, 1);
getTotalAdjustedCashBook();
}

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
int col = jTable7.getColumnCount();
int row = jTable7.getRowCount();
String tablevalues[][] = new String[row][col];
for (int b = 0; b <= row-1; b++) {
for (int c = 0; c <= col-1; c++) {
if (jTable7.getValueAt(b, c) != null) tablevalues[b][c] = jTable7.getValueAt(b, c).toString();
else tablevalues[b][c] = "";
}
}
GregorianCalendar r = (GregorianCalendar) GregorianCalendar.getInstance();
String hes = (String)jComboBox8.getSelectedItem() + "_" + r.get(GregorianCalendar.DAY_OF_MONTH) + "_" + (r.get(GregorianCalendar.MONTH)+1) + "_" + r.get(GregorianCalendar.YEAR) + ".html";
printReport(tablevalues, col, hes, (String)jComboBox8.getSelectedItem());
openReport(hes);
    }//GEN-LAST:event_jButton24ActionPerformed

    public boolean matchParticulars(String a_part, String b_part)  {
    String[] a = a_part.split(" ");
    String[] b = b_part.split(" ");
    int s = 0;
    for (int i = 0; i < a.length; i++) {
    jim: {
    for (int j = 0; j < b.length; j++) {
   // System.out.println(a[i].toLowerCase() + ">" + b[j].toLowerCase());
     if (a[i].toLowerCase().equals(b[j].toLowerCase())) {s++;break jim;}
     }
    }
    }
    System.out.println(s + "/" + a.length);
 if (s >= (int)(a.length/2)) return true;
    
    s = 0;
    for (int i = 0; i < a.length; i++) {
    jim: {
    for (int j = 0; j < b.length; j++) {
    //System.out.println(a[i].toLowerCase() + ">" + b[j].toLowerCase());
     if (a[i].toLowerCase().charAt(0) == b[j].toLowerCase().charAt(0)) {s++;break jim;}
     }
    }
    }
    System.out.println(s + "/" + a.length);
if (s >= (int)(a.length/2)) return true;
    else return false;
    }

    private void jInternalFrame11InternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame11InternalFrameActivated
jComboBox11.removeAllItems();
Calendar r = Calendar.getInstance();
int year = r.get(Calendar.YEAR);
for (int i = 0; i <= 9; i++) {
jComboBox11.addItem(year - i);
}
    }//GEN-LAST:event_jInternalFrame11InternalFrameActivated

public String getDataFrom(String column, File fb) {
HSSFWorkbook wb = null;
try {
NPOIFSFileSystem fs = new NPOIFSFileSystem(fb);
wb = new HSSFWorkbook(fs.getRoot(), true);
}
catch (Exception e) {return null;}
String ret = null;
CellReference cellRef = new CellReference(column);
Sheet sheet1 = wb.getSheetAt(0);
Row rowl = sheet1.getRow(cellRef.getRow());
//Row rowl = sheet1.getRow(row);
Cell cell = rowl.getCell(cellRef.getCol());
try {
switch (cell.getCellType()) {
case Cell.CELL_TYPE_STRING:
ret = cell.getRichStringCellValue().getString();
break;
case Cell.CELL_TYPE_BLANK:
ret = "";
break;
case Cell.CELL_TYPE_NUMERIC:
if (DateUtil.isCellDateFormatted(cell)) {
ret = Long.valueOf(cell.getDateCellValue().getTime()).toString();
//ret = cell.getDateCellValue().getDate() + "/" + (cell.getDateCellValue().getMonth() + 1) + "/" + (cell.getDateCellValue().getYear()+1900);
} else {
ret = String.valueOf(cell.getNumericCellValue()).toString();
}
break;
case Cell.CELL_TYPE_BOOLEAN:
System.out.println(cell.getBooleanCellValue());
break;
case Cell.CELL_TYPE_FORMULA:
ret = cell.getCellFormula().toString();
break;
default:
System.out.println();
}
}
catch (Exception e) {}
return ret;
}

public String[][] getXLSContents(Workbook wb) {
Sheet sheet1 = wb.getSheetAt(0);
int row_n = 0; int column_n = 0;boolean red = true;
String content[][] = new String[1000][1000];
row_n = 0; column_n = 0;
for (Row row : sheet1) {
for (Cell cell : row) {
CellReference cellRef = new CellReference(row.getRowNum(), cell.getColumnIndex());
System.out.print(cellRef.formatAsString());
System.out.print(" - ");
switch (cell.getCellType()) {
case Cell.CELL_TYPE_STRING:
System.out.println(cell.getRichStringCellValue().getString());
content[row_n][column_n] = cell.getRichStringCellValue().getString();column_n++;
break;
case Cell.CELL_TYPE_NUMERIC:
if (DateUtil.isCellDateFormatted(cell)) {
System.out.println(cell.getDateCellValue());
content[row_n][column_n] = cell.getDateCellValue().toString();column_n++;
} else {
System.out.println(cell.getNumericCellValue());
content[row_n][column_n] = String.valueOf(cell.getNumericCellValue()).toString();column_n++;
}
break;
case Cell.CELL_TYPE_BOOLEAN:
System.out.println(cell.getBooleanCellValue());
break;
case Cell.CELL_TYPE_FORMULA:
System.out.println(cell.getCellFormula());
content[row_n][column_n] = cell.getCellFormula().toString();column_n++;
break;
default:
System.out.println();
}
}
column_n = 0; row_n++;
}
return content;
}

    private void jInternalFrame5InternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame5InternalFrameActivated
jFileChooser2.setFileFilter(new FileFilter() {
@Override
public boolean accept(File f) {
if ((f.getName().endsWith(".xls"))||(f.isDirectory())) return true;
else return false;
}
@Override
public String getDescription() {
return ".xls";
}
});
    }//GEN-LAST:event_jInternalFrame5InternalFrameActivated

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
 if (evt.getActionCommand().equals(jFileChooser1.APPROVE_SELECTION)) {
try {
upload = jFileChooser1.getSelectedFile();type = "bank";
}
catch (Exception e) {}
jInternalFrame4.setVisible(false);
jInternalFrame14.setVisible(true);
}
else jInternalFrame4.setVisible(false);
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    private void jInternalFrame14InternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame14InternalFrameActivated
jInternalFrame14.setSize(366, 222);
jTextField11.setText("");jTextField12.setText("");jTextField13.setText("");jTextField14.setText("");jTextField15.setText("");jTextField20.setText("");
    }//GEN-LAST:event_jInternalFrame14InternalFrameActivated

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
jInternalFrame15.setVisible(true);
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jInternalFrame1InternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame1InternalFrameActivated
jComboBox13.removeAllItems();
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
rs = s.executeQuery("SELECT * FROM CashBookList");
while (rs.next()) {
String accountname = rs.getString("AccountName");
boolean fillit = true;
for (int i = 0; i <= jComboBox13.getItemCount()-1; i++) {
if ((accountname == (String)jComboBox13.getItemAt(i))||(accountname == null)||(accountname == "")) fillit = false;
}
if (fillit) jComboBox13.addItem(accountname);
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
    }//GEN-LAST:event_jInternalFrame1InternalFrameActivated

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
String acctname = (String)jComboBox12.getSelectedItem();
for (int ss = 0; ss <= jTable4.getRowCount()-1; ss++) {
for (int tt = 0; tt <= jTable4.getColumnCount()-1; tt++) {
jTable4.setValueAt("", ss, tt);
}
}
if (acctname != null) {
try {
int a = 0;
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
preparedStatement = conn.prepareStatement("SELECT * FROM CashBook WHERE AccountName = ?");
preparedStatement.setString(1, acctname);
rs = preparedStatement.executeQuery();
while (rs.next()) {
java.sql.Date rr = rs.getDate("Date");
jTable4.setValueAt(rr.getDate() + "/" + (rr.getMonth()+1) + "/" + (rr.getYear()+1900), a, 0);
jTable4.setValueAt(rs.getString("RefNo"), a, 1);
jTable4.setValueAt(rs.getString("Particulars"), a, 2);
jTable4.setValueAt(rs.getString("Type"), a, 3);
jTable4.setValueAt(rs.getString("Value"), a, 4);
jTable4.setValueAt(rs.getString("Balance"), a, 5);
a++;
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
}
    }//GEN-LAST:event_jButton27ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
bank_namee = (String)jComboBox16.getSelectedItem();
bank_account_name = (String)jComboBox17.getSelectedItem();
cashbook_account = (String)jComboBox18.getSelectedItem();
if ((bank_namee != null)&&(bank_account_name != null)&&(cashbook_account != null)) {
    jInternalFrame11.setVisible(true);jInternalFrame16.setVisible(false);
}
    }//GEN-LAST:event_jButton28ActionPerformed

public String[] getCellRange(String param) {
String h[] = null;
String paramx[] = param.split(":");
if (paramx.length == 2) {
String range = paramx[0].substring(0, 1);
int ii = Integer.valueOf(paramx[0].substring(1)).intValue();
int ii2 = Integer.valueOf(paramx[1].substring(1)).intValue();
h = new String[ii2-ii+1];
int p = 0;
for (int i = ii; i <= ii2; i++) {
h[p] = getDataFrom(range+i, upload);p++;
}
}
return h;
}

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
String dates = jTextField11.getText();
String particulars = jTextField12.getText();
String refnos = jTextField13.getText();
String credits = jTextField14.getText();
String debits = jTextField15.getText();
String balances = jTextField20.getText();
String uniquecodes = jTextField21.getText();
String datex[] = dates.split(":");
int ii = Integer.valueOf(datex[0].substring(1)).intValue();
int ii2 = Integer.valueOf(datex[1].substring(1)).intValue();
int h = ii2-ii+1;
String a[][] = new String[h][7];
if (upload != null) {
String aa[] = getCellRange(dates);
String ab[] = getCellRange(particulars);
String ac[] = getCellRange(refnos);
String ad[] = getCellRange(credits);
String ae[] = getCellRange(debits);
String af[] = getCellRange(balances);
String ag[] = getCellRange(uniquecodes);
for (int i = 0; i < h; i++) {
a[i][0] = aa[i]; a[i][1] = ab[i]; a[i][2] = ac[i];
if ((ad[i] == "")||(ad[i] == null)) {a[i][3] = "Debit";a[i][4] = ae[i];}
else {a[i][3] = "Credit"; a[i][4] = ad[i];}
a[i][5] = af[i];a[i][6] = ag[i];
}
}
if (type.equals("bank")) {
fillBankToDB(a, (String)jComboBox2.getSelectedItem(),jTextField18.getText());
}
else {
fillCashBookToDB(a, jTextField19.getText());
}
upload = null;type = null;jInternalFrame14.setVisible(false);
jTextField11.setText("");jTextField12.setText("");jTextField13.setText("");jTextField14.setText("");jTextField15.setText("");jTextField20.setText("");
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jInternalFrame16InternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame16InternalFrameActivated
try {
jComboBox16.removeAllItems();
jComboBox17.removeAllItems();
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
PreparedStatement preparedStatement = null;
String selTable = "SELECT * FROM BankList";
rs = s.executeQuery(selTable);
while (rs.next()) {
String bankname = rs.getString("BankName");
String accountname = rs.getString("AccountName");
boolean fillit = true;
for (int i = 0; i <= jComboBox16.getItemCount()-1; i++) {
try {if ((bankname.equals((String)jComboBox16.getItemAt(i)))||(bankname == null)||(bankname.replaceAll(" ", "") == "")) fillit = false;
} catch (Exception e) {fillit = false;}
}
boolean fillit2 = true;
for (int j = 0; j <= jComboBox17.getItemCount()-1; j++) {
try {if ((accountname.equals((String)jComboBox17.getItemAt(j)))||(accountname == null)||(accountname.replaceAll(" ", "") == "")) fillit2 = false;
    } catch (Exception e) {fillit2 = false;}
}
if (fillit) jComboBox16.addItem(bankname);
if (fillit2) jComboBox17.addItem(accountname);
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
jComboBox18.removeAllItems();
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
rs = s.executeQuery("SELECT * FROM CashBookList");
while (rs.next()) {
String accountname = rs.getString("AccountName");
boolean fillit = true;
for (int i = 0; i <= jComboBox18.getItemCount()-1; i++) {
try {if ((accountname.equals((String)jComboBox18.getItemAt(i)))||(accountname == null)||(accountname.replaceAll(" ", "") == "")) fillit = false;
} catch (Exception e) {fillit = false;}
}
if (fillit) jComboBox18.addItem(accountname);
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
    }//GEN-LAST:event_jInternalFrame16InternalFrameActivated

    private void jTextField11CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11CaretUpdate
     if (jTextField11.getText().length() > 0)  {
        jTextField12.setText(jTextField11.getText().replace(jTextField11.getText().substring(0, 1), "b"));
        jTextField13.setText(jTextField11.getText().replace(jTextField11.getText().substring(0, 1), "c"));
        jTextField14.setText(jTextField11.getText().replace(jTextField11.getText().substring(0, 1), "e"));
        jTextField15.setText(jTextField11.getText().replace(jTextField11.getText().substring(0, 1), "d"));
        jTextField20.setText(jTextField11.getText().replace(jTextField11.getText().substring(0, 1), "f"));
        jTextField21.setText(jTextField11.getText().replace(jTextField11.getText().substring(0, 1), "g"));
        }
    }//GEN-LAST:event_jTextField11CaretUpdate

    private void jTextField12CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField12CaretUpdate
// if (jTextField12.getText().length() > 0) jTextField12.setText(jTextField12.getText().replace("b", jTextField12.getText().substring(0, 1)));
    }//GEN-LAST:event_jTextField12CaretUpdate

    private void jTextField13CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField13CaretUpdate
// if (jTextField13.getText().length() > 0) jTextField13.setText(jTextField13.getText().replace("c", jTextField13.getText().substring(0, 1)));
    }//GEN-LAST:event_jTextField13CaretUpdate

    private void jTextField14CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField14CaretUpdate
//if (jTextField14.getText().length() > 0) jTextField14.setText(jTextField14.getText().replace("d", jTextField14.getText().substring(0, 1)));
    }//GEN-LAST:event_jTextField14CaretUpdate

    private void jTextField15CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField15CaretUpdate
//if (jTextField15.getText().length() > 0) jTextField15.setText(jTextField15.getText().replace("e", jTextField15.getText().substring(0, 1)));
    }//GEN-LAST:event_jTextField15CaretUpdate

    private void jTextField20CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField20CaretUpdate
//if (jTextField20.getText().length() > 0)  jTextField20.setText(jTextField20.getText().replace("f", jTextField20.getText().substring(0, 1)));
    }//GEN-LAST:event_jTextField20CaretUpdate

    private void jTextField12InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextField12InputMethodTextChanged

    }//GEN-LAST:event_jTextField12InputMethodTextChanged

    private void jTextField12ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jTextField12ComponentAdded
if (jTextField12.getText().length() > 0) jTextField12.setText(jTextField12.getText().replace("b", jTextField12.getText().substring(0, 1)));
    }//GEN-LAST:event_jTextField12ComponentAdded

    private void jInternalFrame8InternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame8InternalFrameActivated
try {
jComboBox12.removeAllItems();
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
s = conn.createStatement();
PreparedStatement preparedStatement = null;
String selTable = "SELECT * FROM CashBookList";
rs = s.executeQuery(selTable);
while (rs.next()) {
String accountname = rs.getString("AccountName");
boolean fillit = true;
for (int i = 0; i < jComboBox2.getItemCount(); i++) {
if ((accountname == (String)jComboBox2.getItemAt(i))||(accountname == null)||(accountname == "")) fillit = false;
}
if (fillit) jComboBox12.addItem(accountname);
}
}
catch (Exception e) {
e.printStackTrace();
}
finally {
try {
conn.close();
s.close();
}
catch (Exception e) {}
}
    }//GEN-LAST:event_jInternalFrame8InternalFrameActivated

    private void jDialog3ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jDialog3ComponentResized
//System.out.println(jDialog3.getHeight() + "==" + jDialog3.getWidth());
    }//GEN-LAST:event_jDialog3ComponentResized

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
jInternalFrame17.setVisible(false);
    }//GEN-LAST:event_jButton30ActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
String x1 = (String)jComboBox19.getSelectedItem();
String x2 = (String)jComboBox20.getSelectedItem();
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
preparedStatement = conn.prepareStatement("insert into MatchTransact values(?, ?)");
preparedStatement.setString(1, x1);
preparedStatement.setString(2, x2);
preparedStatement.execute();
}
catch (Exception e) {
e.printStackTrace();
jDialog1.setLocationRelativeTo(this);
jLabel9.setText("Unsuccessful!!");
jDialog1.setVisible(true);
}
finally {
try {
conn.close();
preparedStatement.close();
jComboBox19.removeItem(x1);
jComboBox20.removeItem(x2);
}
catch (Exception e2) {}
        }
if (jComboBox19.getItemCount() == 0) jInternalFrame17.setVisible(false);
    }//GEN-LAST:event_jButton29ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
jInternalFrame17.setVisible(true);jDialog4.setVisible(false);
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
jDialog4.setVisible(false);
calculateAllValues();
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jInternalFrame17InternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame17InternalFrameActivated
int month = jComboBox8.getSelectedIndex()+1;
Calendar r = Calendar.getInstance();
int year = r.get(Calendar.YEAR) - jComboBox11.getSelectedIndex();
getNCTotalMatchedLodgements(month, year, bank_namee, bank_account_name, cashbook_account);
getNCTotalMatchedWithdraws(month, year, bank_namee, bank_account_name, cashbook_account);
String banklodgements[][] = getBankTransactions(month, year, bank_namee, bank_account_name, true);
String bankwithdraws[][] = getBankTransactions(month, year, bank_namee, bank_account_name, false);
jComboBox20.removeAllItems();
try {
for (int y = 0; y <= banklodgements.length-1; y++) {
jComboBox20.addItem(banklodgements[y][1]);
}
}
catch (Exception e) {}
try {
for (int y = 0; y <= bankwithdraws.length-1; y++) {
if (getBankValue(bankwithdraws[y][1]) == getCashbookValue((String)jComboBox19.getSelectedItem())) jComboBox20.addItem(bankwithdraws[y][1]);
}
}
catch (Exception e) {}
    }//GEN-LAST:event_jInternalFrame17InternalFrameActivated

public String returnStringAsHTML(String h) {
String y = "<html><head><title>Tooltip</title></head><body><h3>" + h + "</h3></body></html>";
return y;
}

public void fillBankToDB(String[][] a, String h, String h2) {
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
for (int i = 0; i < a.length; i++) {
preparedStatement = conn.prepareStatement("insert into BankStatement values(?, ?, ?, ?, ?, ?, ?, ?, ?)");
java.sql.Date fr = new java.sql.Date(Long.decode(a[i][0]).longValue());
preparedStatement.setDate(1, fr);
preparedStatement.setString(2, h2);
preparedStatement.setString(3, a[i][1]);
preparedStatement.setString(4, a[i][2]);
preparedStatement.setString(5, a[i][3]);
preparedStatement.setDouble(6, Double.valueOf(a[i][4]).doubleValue());
preparedStatement.setDouble(7, Double.valueOf(a[i][5]).doubleValue());
preparedStatement.setString(8, h);
preparedStatement.setString(9, a[i][6]);
preparedStatement.execute();
}
    }
catch (Exception e) {
e.printStackTrace();
jDialog1.setLocationRelativeTo(this);
jLabel9.setText("Unsuccessful!!");
jDialog1.setVisible(true);
}
finally {
try {
conn.close();
preparedStatement.close();
if (jLabel9.getText().equals("Unsuccessful!!")) return;
}
catch (Exception e2) {}
}
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
preparedStatement = conn.prepareStatement("insert into BankList values(?, ?, ?)");
preparedStatement.setString(1, h);
preparedStatement.setString(2, h2);
preparedStatement.setString(3, "None");
preparedStatement.execute();
}
catch (Exception e) {
e.printStackTrace();
jDialog1.setLocationRelativeTo(this);
jLabel9.setText("Unsuccessful!!");
jDialog1.setVisible(true);
}
finally {
try {
conn.close();
preparedStatement.close();
if (jLabel9.getText().equals("Unsuccessful!!")) return;
}
catch (Exception e2) {}
jDialog1.setLocationRelativeTo(this);
jLabel9.setText("Successful!!");
jDialog1.setVisible(true);
}
}

public void fillCashBookToDB(String[][] b, String h) {
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
for (int i = 0; i < b.length; i++) {
preparedStatement = conn.prepareStatement("insert into CashBook values(?, ?, ?, ?, ?, ?, ?, ?)");
java.sql.Date fr = new java.sql.Date(Long.decode(b[i][0]).longValue());
preparedStatement.setDate(1, fr);
preparedStatement.setString(2, h);
preparedStatement.setString(3, b[i][2]);
preparedStatement.setString(4, b[i][1]);
preparedStatement.setString(5, b[i][3]);
preparedStatement.setDouble(6, Double.valueOf(b[i][4]).doubleValue());
preparedStatement.setDouble(7, Double.valueOf(b[i][5]).doubleValue());
preparedStatement.setString(8, b[i][6]);
preparedStatement.execute();
}
    }
catch (Exception e) {
e.printStackTrace();
jDialog1.setLocationRelativeTo(this);
jLabel9.setText("Unsuccessful!!");
jDialog1.setVisible(true);
}
finally {
try {
conn.close();
preparedStatement.close();
if (jLabel9.getText().equals("Unsuccessful!!")) return;
}
catch (Exception e2) {}
}
try {
Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
conn = DriverManager.getConnection(database, "", "");
preparedStatement = conn.prepareStatement("insert into CashBookList values(?)");
preparedStatement.setString(1, h);
preparedStatement.execute();
}
catch (Exception e) {
e.printStackTrace();
jDialog1.setLocationRelativeTo(this);
jDialog1.setVisible(true);
}
finally {
try {
conn.close();
preparedStatement.close();
if (jLabel9.getText().equals("Unsuccessful!!")) return;
}
catch (Exception e2) {}
jDialog1.setLocationRelativeTo(this);
jLabel9.setText("Successful!!");
jDialog1.setVisible(true);
}
}

/**
* @param args the command line arguments
*/
public static void main(String args[]) {
java.awt.EventQueue.invokeLater(new Runnable() {
public void run() {
new ReconciliationForm().setVisible(true);
}
});
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox10;
    private javax.swing.JComboBox jComboBox11;
    private javax.swing.JComboBox jComboBox12;
    private javax.swing.JComboBox jComboBox13;
    private javax.swing.JComboBox jComboBox14;
    private javax.swing.JComboBox jComboBox15;
    private javax.swing.JComboBox jComboBox16;
    private javax.swing.JComboBox jComboBox17;
    private javax.swing.JComboBox jComboBox18;
    private javax.swing.JComboBox jComboBox19;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox20;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JComboBox jComboBox8;
    private javax.swing.JComboBox jComboBox9;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JDialog jDialog3;
    private javax.swing.JDialog jDialog4;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame10;
    private javax.swing.JInternalFrame jInternalFrame11;
    private javax.swing.JInternalFrame jInternalFrame12;
    private javax.swing.JInternalFrame jInternalFrame13;
    private javax.swing.JInternalFrame jInternalFrame14;
    private javax.swing.JInternalFrame jInternalFrame15;
    private javax.swing.JInternalFrame jInternalFrame16;
    private javax.swing.JInternalFrame jInternalFrame17;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JInternalFrame jInternalFrame3;
    private javax.swing.JInternalFrame jInternalFrame4;
    private javax.swing.JInternalFrame jInternalFrame5;
    private javax.swing.JInternalFrame jInternalFrame6;
    private javax.swing.JInternalFrame jInternalFrame7;
    private javax.swing.JInternalFrame jInternalFrame8;
    private javax.swing.JInternalFrame jInternalFrame9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable10;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable8;
    private javax.swing.JTable jTable9;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

}
